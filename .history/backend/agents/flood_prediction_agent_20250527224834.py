from base_agent import BaseAgent
from typing import Dict, Any

class FloodPredictionAgent(BaseAgent):
    """Agente especializado en predicciones de inundaciones agr√≠colas"""
    
    def __init__(self, api_key=None):
        super().__init__("PREDICTOR_INUNDACIONES", api_key)
        self.specialty = "An√°lisis de riesgo de inundaciones en zonas agr√≠colas"
    
    def get_agent_description(self) -> str:
        return """
        üåä AGENTE PREDICTOR DE INUNDACIONES
        - Monitorea alertas de inundaci√≥n
        - Eval√∫a riesgo para cultivos
        - Recomienda medidas preventivas
        - Analiza impacto en infraestructura agr√≠cola
        """
    
    def execute_task(self, region: str = "Colombia", **kwargs) -> Dict[str, Any]:
        """Execute flood prediction analysis"""
        print(f"\nüåä {self.agent_name}: Iniciando an√°lisis de inundaciones para {region}")
        
        self.start_session(f"AN√ÅLISIS DE INUNDACIONES - {region}")
        
        try:
            # Search for flood-related news
            search_results = self.search_tools.search_agricultural_news("inundaciones", region)
            combined_data = "\n".join(search_results)
            
            # Analyze with specialized prompt
            flood_prompt = """
            Como agente especializado en predicciones de inundaciones agr√≠colas, analiza los siguientes datos sobre {region}:

            DATOS DE B√öSQUEDA:
            {data}

            Genera un reporte que incluya:
            1. üö® ALERTAS CR√çTICAS DE INUNDACI√ìN (ubicaciones espec√≠ficas, fechas, niveles de riesgo)
            2. üåæ CULTIVOS EN RIESGO INMEDIATO (tipos de cultivos, hect√°reas estimadas)
            3. üèóÔ∏è INFRAESTRUCTURA AGR√çCOLA AMENAZADA (bodegas, canales, caminos rurales)
            4. ‚ö†Ô∏è PLAN DE ACCI√ìN INMEDIATA (pasos espec√≠ficos para agricultores)
            5. üìä EVALUACI√ìN DE PROBABILIDAD (porcentajes y cronograma)

            Enf√≥cate en informaci√≥n accionable y espec√≠fica para el sector agr√≠cola.
            """
            
            analysis = self.analyze_with_ai(combined_data, flood_prompt, region=region)
            
            # Save results
            save_result = self.save_result("ANALISIS_INUNDACIONES", analysis, region)
            
            print(f"üíæ {save_result}")
            
            return {
                "agent": self.agent_name,
                "task": "flood_prediction",
                "region": region,
                "status": "completed",
                "analysis": analysis,
                "data_sources": len(search_results)
            }
            
        except Exception as e:
            error_msg = f"‚ùå Error en {self.agent_name}: {str(e)}"
            print(error_msg)
            return {
                "agent": self.agent_name,
                "task": "flood_prediction", 
                "region": region,
                "status": "error",
                "error": str(e)
            }
    
    def get_risk_level(self, region: str = "Colombia") -> str:
        """Quick risk assessment for floods"""
        try:
            quick_search = self.search_tools.search(f"alerta inundaci√≥n {region} hoy IDEAM")
            
            risk_prompt = """
            Bas√°ndote en esta informaci√≥n: {data}
            
            Determina el NIVEL DE RIESGO de inundaci√≥n para agricultura en {region}:
            - BAJO: Sin alertas oficiales
            - MEDIO: Alertas amarillas o condiciones de vigilancia  
            - ALTO: Alertas rojas o emergencia declarada
            - CR√çTICO: Evacuaciones en curso o inundaciones activas
            
            Responde solo con: RIESGO [NIVEL] - [Justificaci√≥n breve]
            """
            
            risk_analysis = self.analyze_with_ai(quick_search, risk_prompt, region=region)
            return risk_analysis
            
        except Exception as e:
            return f"‚ùå Error evaluando riesgo: {str(e)}"
