from langchain_community.tools import DuckDuckGoSearchRun
from typing import Optional, List
from config import Config

class SearchTools:
    """Handle web search operations for agricultural intelligence"""
    
    def __init__(self):
        try:
            self.search_tool = DuckDuckGoSearchRun()
            print("‚úì Herramienta de b√∫squeda web inicializada")
            self.available = True
        except Exception as e:
            print(f"‚ö† Warning: Could not initialize search tool: {e}")
            self.search_tool = None
            self.available = False
    
    def is_available(self) -> bool:
        """Check if search tools are available"""
        return self.available
    
    def search(self, query: str) -> str:
        """Perform a web search"""
        if not self.available:
            return f"‚ùå B√∫squeda web no disponible para: {query}"
        
        try:
            print(f"üîç Buscando en web: {query}")
            results = self.search_tool.run(query)
            return results
        except Exception as e:
            return f"‚ùå Error en b√∫squeda web: {str(e)}"
    
    def search_multiple_queries(self, queries: List[str]) -> List[str]:
        """Perform multiple searches and return combined results"""
        all_results = []
        for query in queries:
            print(f"üîç Ejecutando b√∫squeda: {query}")
            try:
                result = self.search(query)
                all_results.append(result)
            except Exception as e:
                all_results.append(f"Error en b√∫squeda {query}: {str(e)}")
        return all_results
    
    def search_agricultural_news(self, topic: str, region: str = "Per√∫") -> List[str]:
        """Search for specific agricultural news with predefined queries - GLOBAL COVERAGE"""
        
        # Normalizar el nombre de la regi√≥n para b√∫squedas m√°s efectivas
        region_normalized = self._normalize_region_name(region)
        
        search_templates = {
            "inundaciones": [
                f"flood alert agriculture {region_normalized} crops affected latest news",
                f"inundaci√≥n agricultura {region_normalized} cultivos perdidos noticias recientes",
                f"\"emergency flood\" {region_normalized} agriculture evacuation news",
                f"\"alerta inundaci√≥n\" {region_normalized} agricultura hect√°reas afectadas",
                f"flooding forecast {region_normalized} agricultural impact prediction",
                f"\"se espera inundaci√≥n\" {region_normalized} agricultura pr√≥ximos d√≠as"
            ],
            
            "fertilizantes": [
                f"fertilizer price increase {region_normalized} agriculture news",
                f"\"precio fertilizante sube\" {region_normalized} agricultores noticias",
                f"\"fertilizer shortage\" {region_normalized} agricultural production impact",
                f"\"escasez fertilizante\" {region_normalized} producci√≥n agr√≠cola",
                f"\"urea price\" {region_normalized} agriculture import cost",
                f"inflaci√≥n insumos agr√≠colas {region_normalized} fertilizante"
            ],
            
            "sequia": [
                f"drought emergency {region_normalized} agriculture water crisis",
                f"\"sequ√≠a severa\" {region_normalized} cultivos agricultura",
                f"\"water shortage\" {region_normalized} irrigation agriculture restriction",
                f"\"escasez agua\" {region_normalized} agricultura riego prohibici√≥n",
                f"\"crop loss drought\" {region_normalized} agricultural emergency",
                f"\"p√©rdida cosecha sequ√≠a\" {region_normalized} hect√°reas afectadas"
            ],
            
            "plagas": [
                f"pest outbreak {region_normalized} agriculture crop disease",
                f"\"brote plaga\" {region_normalized} cultivos agricultura fitosanitaria",
                f"\"new plant disease\" {region_normalized} agriculture pest control",
                f"\"nueva enfermedad plantas\" {region_normalized} agricultura",
                f"\"insect invasion\" {region_normalized} agriculture urgent control",
                f"\"resistencia pesticida\" {region_normalized} manejo plagas"
            ],
            
            "mercado": [
                f"agricultural prices rising {region_normalized} export market",
                f"\"precios agr√≠colas suben\" {region_normalized} mercado exportaci√≥n",
                f"\"international demand\" {region_normalized} agricultural export opportunity",
                f"\"demanda internacional\" {region_normalized} exportaci√≥n agr√≠cola",
                f"commodity prices {region_normalized} agriculture market forecast",
                f"\"nuevos mercados\" exportaci√≥n {region_normalized} agricultura"
            ],
            
            "infraestructura": [
                f"road closure {region_normalized} agricultural transport logistics",
                f"\"cierre carretera\" {region_normalized} transporte agr√≠cola",
                f"\"infrastructure damage\" {region_normalized} agriculture supply chain",
                f"\"da√±o infraestructura\" {region_normalized} agricultura transporte",
                f"\"transport strike\" {region_normalized} agricultural products",
                f"\"paro transportadores\" {region_normalized} productos agr√≠colas"
            ],
            
            # ESPEC√çFICO PARA PER√ö - b√∫squedas adicionales
            "clima_peru": [
                f"clima agricultura Per√∫ sierra costa selva pron√≥stico",
                f"\"El Ni√±o\" Per√∫ agricultura impacto cultivos",
                f"\"La Ni√±a\" Per√∫ agricultura sequ√≠a inundaci√≥n",
                f"SENAMHI Per√∫ alerta agricultura clima",
                f"\"cambio clim√°tico\" Per√∫ agricultura adaptaci√≥n"
            ] if region_normalized.lower() in ["per√∫", "peru"] else [],
            
            "economia_peru": [
                f"precio productos agr√≠colas Per√∫ mercado mayorista",
                f"exportaci√≥n agr√≠cola Per√∫ estad√≠sticas MINAGRI",
                f"\"agricultura peruana\" mercado internacional competitividad",
                f"\"sector agrario Per√∫\" inversi√≥n desarrollo",
                f"\"seguridad alimentaria\" Per√∫ producci√≥n agr√≠cola"
            ] if region_normalized.lower() in ["per√∫", "peru"] else []
        }
        
        # Obtener las consultas base
        base_queries = search_templates.get(topic.lower(), [])
        
        # Si es Per√∫, agregar b√∫squedas espec√≠ficas adicionales
        if region_normalized.lower() in ["per√∫", "peru"]:
            if topic.lower() == "clima":
                base_queries.extend(search_templates.get("clima_peru", []))
            elif topic.lower() == "mercado":
                base_queries.extend(search_templates.get("economia_peru", []))
        
        # Si no hay b√∫squedas espec√≠ficas, crear b√∫squeda gen√©rica global
        if not base_queries:
            base_queries = [
                f"{topic} agriculture {region_normalized} news latest",
                f"{topic} agricultura {region_normalized} noticias recientes",
                f"agricultural {topic} {region_normalized} impact forecast"
            ]
        
        return self.search_multiple_queries(base_queries)
    
    def _normalize_region_name(self, region: str) -> str:
        """Normalize region name for better search results"""
        
        # Diccionario de normalizaci√≥n para b√∫squedas m√°s efectivas
        region_mappings = {
            "per√∫": "Peru",
            "peru": "Peru", 
            "colombia": "Colombia",
            "m√©xico": "Mexico",
            "mexico": "Mexico",
            "argentina": "Argentina",
            "brasil": "Brazil",
            "brazil": "Brazil",
            "chile": "Chile",
            "ecuador": "Ecuador",
            "bolivia": "Bolivia",
            "venezuela": "Venezuela",
            "estados unidos": "United States",
            "usa": "United States",
            "united states": "United States",
            "canad√°": "Canada",
            "canada": "Canada",
            "espa√±a": "Spain",
            "spain": "Spain",
            "francia": "France",
            "france": "France",
            "italia": "Italy",
            "italy": "Italy",
            "alemania": "Germany",
            "germany": "Germany",
            "china": "China",
            "india": "India",
            "jap√≥n": "Japan",
            "japan": "Japan",
            "australia": "Australia"
        }
        
        region_lower = region.lower().strip()
        return region_mappings.get(region_lower, region.title())
    
    def search_peru_specific(self, topic: str) -> List[str]:
        """B√∫squedas espec√≠ficas para Per√∫ - agricultura peruana"""
        
        peru_queries = {
            "general": [
                "agricultura Per√∫ MINAGRI estad√≠sticas producci√≥n",
                "sector agrario Per√∫ desarrollo rural pol√≠ticas",
                "\"agricultura familiar\" Per√∫ peque√±os productores",
                "\"seguridad alimentaria\" Per√∫ producci√≥n nacional",
                "\"cadenas productivas\" agricultura Per√∫ competitividad"
            ],
            
            "sierra": [
                "agricultura sierra Per√∫ papa quinua cultivos andinos",
                "\"agricultura de monta√±a\" Per√∫ adaptaci√≥n clima",
                "\"cultivos nativos\" Per√∫ sierra biodiversidad",
                "\"terrazas agr√≠colas\" Per√∫ sierra conservaci√≥n"
            ],
            
            "costa": [
                "agricultura costa Per√∫ esp√°rrago uva exportaci√≥n",
                "\"agricultura tecnificada\" costa Per√∫ riego",
                "\"valles costeros\" Per√∫ producci√≥n agr√≠cola",
                "\"agricultura de exportaci√≥n\" costa Per√∫"
            ],
            
            "selva": [
                "agricultura selva Per√∫ caf√© cacao amazonia",
                "\"agricultura sostenible\" selva Per√∫ bosques",
                "\"cultivos tropicales\" selva Per√∫ biodiversidad",
                "\"agricultura familiar\" amazonia Per√∫"
            ]
        }
        
        queries = peru_queries.get(topic.lower(), peru_queries["general"])
        return self.search_multiple_queries(queries)
