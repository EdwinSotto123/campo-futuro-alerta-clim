import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  Bot, 
  User,
  Send, 
  Camera,
  Mic,
  Bug,
  Leaf,
  Download,
  Clock,
  Activity,
  Zap,
  Play,
  ExternalLink,
  Eye,
  AlertTriangle,
  CloudRain,
  Sun,
  Snowflake,
  Wind,
  Thermometer,
  Droplets,
  Shield,
  TrendingUp,
  TrendingDown,
  Calendar,
  MapPin,
  DollarSign,
  Umbrella,
  Flame,
  Navigation,
  Bell,
  CheckCircle,
  XCircle,
  Info,
  ArrowRight,
  Timer,
  Target,
  History,
  Upload,
  MessageSquare,
  FileText,
  Headphones
} from "lucide-react";

interface WeatherAlert {
  id: string;
  type: 'sequ√≠a' | 'inundaci√≥n' | 'granizo' | 'helada' | 'viento' | 'calor';
  severity: 'baja' | 'media' | 'alta' | 'extrema';
  title: string;
  description: string;
  region: string;
  startDate: Date;
  endDate: Date;
  probability: number;
  impact: string;
  recommendations: {
    before: string[];
    during: string[];
    after: string[];
  };
  financing: {
    available: boolean;
    programs: string[];
    requirements: string[];
  };
  icon: React.ElementType;
  color: string;
  badgeColor: string;
}

interface ClimatePhase {
  phase: 'antes' | 'durante' | 'despu√©s';
  title: string;
  icon: string;
  color: string;
  actions: string[];
}

interface Message {
  id: string;
  text: string;
  isBot: boolean;
  timestamp: Date;
  category?: string;
  attachments?: AttachmentType[];
  analysis?: AnalysisResult;
  weatherAlert?: WeatherAlert;
}

interface AttachmentType {
  type: "image" | "document" | "audio";
  url: string;
  name: string;
  size?: string;
}

interface AnalysisResult {
  type: 'plaga' | 'enfermedad' | 'insecto' | 'cultivo' | 'suelo' | 'clima';
  confidence: number;
  detected: string;
  recommendations: string[];
  severity?: 'baja' | 'media' | 'alta';
  treatment?: string;
  urgency?: string;
}

const AsistentePage = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'üå¶Ô∏è ¬°Hola! Soy Wara, tu asistente clim√°tico. ¬øEn qu√© puedo ayudarte hoy?',
      isBot: true,
      timestamp: new Date(),
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [currentPhase, setCurrentPhase] = useState<'antes' | 'durante' | 'despu√©s'>('antes');

  // Alertas clim√°ticas simuladas de SENAMHI
  const weatherAlerts: WeatherAlert[] = [
    {
      id: '1',
      type: 'sequ√≠a',
      severity: 'alta',
      title: 'Alerta de Sequ√≠a Severa',
      description: 'D√©ficit h√≠drico del 40% en regi√≥n Altiplano Norte',
      region: 'La Paz - Altiplano Norte',
      startDate: new Date(),
      endDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000),
      probability: 85,
      impact: 'P√©rdida potencial del 30-50% en cultivos de papa y quinua',
      recommendations: {
        before: [
          'Implementar sistemas de riego por goteo',
          'Aplicar mulch org√°nico en cultivos',
          'Sembrar variedades resistentes a sequ√≠a',
          'Construir zanjas de infiltraci√≥n',
          'Revisar seguros agr√≠colas'
        ],
        during: [
          'Regar solo en horas de menor evaporaci√≥n (5-7 AM)',
          'Suspender fertilizaci√≥n hasta mejores condiciones',
          'Monitorear estr√©s h√≠drico en plantas',
          'Aplicar riego de salvamento en cultivos prioritarios'
        ],
        after: [
          'Evaluar da√±os en cultivos',
          'Solicitar compensaciones del seguro',
          'Planificar siembra de recuperaci√≥n',
          'Implementar mejoras en sistema de riego'
        ]
      },
      financing: {
        available: true,
        programs: ['Seguro Agr√≠cola Universal (SAU)', 'Fondo de Emergencia Clim√°tica', 'Cr√©ditos BDP Sequ√≠a'],
        requirements: ['Registro en SENASAG', 'Evaluaci√≥n de da√±os', 'Declaraci√≥n jurada']
      },
      icon: Sun,
      color: 'bg-orange-100 border-orange-300',
      badgeColor: 'bg-orange-500'
    },
    {
      id: '2',
      type: 'granizo',
      severity: 'media',
      title: 'Riesgo de Granizo',
      description: 'Condiciones favorables para granizo en valles',
      region: 'Cochabamba - Valles Centrales',
      startDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000),
      endDate: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000),
      probability: 65,
      impact: 'Da√±o potencial en cultivos de tomate, ma√≠z y hortalizas',
      recommendations: {
        before: [
          'Instalar mallas antigranizo',
          'Cosechar productos maduros',
          'Proteger alm√°cigos y plantines',
          'Revisar techos de invernaderos',
          'Activar p√≥lizas de seguro'
        ],
        during: [
          'Refugiarse en lugares seguros',
          'No intentar proteger cultivos durante la tormenta',
          'Documentar da√±os con fotos',
          'Evitar trabajar en campo abierto'
        ],
        after: [
          'Evaluar da√±os inmediatamente',
          'Reportar siniestros al seguro en 48h',
          'Aplicar tratamientos preventivos contra hongos',
          'Resembrar √°reas da√±adas'
        ]
      },
      financing: {
        available: true,
        programs: ['PSAEC Granizo', 'Seguro Catastr√≥fico'],
        requirements: ['Denuncia inmediata', 'Fotos de da√±os', 'Evaluaci√≥n t√©cnica']
      },
      icon: Snowflake,
      color: 'bg-blue-100 border-blue-300',
      badgeColor: 'bg-blue-500'
    },
    {
      id: '3',
      type: 'helada',
      severity: 'extrema',
      title: 'Alerta Extrema de Heladas',
      description: 'Temperaturas bajo -5¬∞C esperadas',
      region: 'Oruro - Altiplano Sur',
      startDate: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000),
      endDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),
      probability: 95,
      impact: 'P√©rdida total en cultivos sensibles sin protecci√≥n',
      recommendations: {
        before: [
          'Encender fogatas o braseros en cultivos',
          'Cubrir plantas con mantas o pl√°sticos',
          'Regar abundantemente antes de la helada',
          'Cosechar productos susceptibles',
          'Preparar sistemas de calefacci√≥n'
        ],
        during: [
          'Mantener fogatas encendidas toda la noche',
          'Monitorear temperatura constantemente',
          'Activar sistemas de aspersi√≥n si disponible',
          'No caminar sobre cultivos helados'
        ],
        after: [
          'Evaluar da√±os al mediod√≠a siguiente',
          'No tocar plantas heladas en la ma√±ana',
          'Aplicar bioestimulantes para recuperaci√≥n',
          'Planificar replantaci√≥n si es necesario'
        ]
      },
      financing: {
        available: true,
        programs: ['Seguro Heladas PSAEC', 'Fondo de Contingencia Clim√°tica'],
        requirements: ['Registro de temperaturas', 'Evaluaci√≥n t√©cnica', 'Declaraci√≥n de emergencia']
      },
      icon: Thermometer,
      color: 'bg-purple-100 border-purple-300',
      badgeColor: 'bg-purple-500'
    }
  ];

  const fileInputRef = useRef<HTMLInputElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'extrema': return 'bg-red-600 text-white';
      case 'alta': return 'bg-red-500 text-white';
      case 'media': return 'bg-yellow-500 text-white';
      case 'baja': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getWeatherIcon = (type: string) => {
    switch (type) {
      case 'sequ√≠a': return <Sun className="h-5 w-5" />;
      case 'inundaci√≥n': return <CloudRain className="h-5 w-5" />;
      case 'granizo': return <Snowflake className="h-5 w-5" />;
      case 'helada': return <Thermometer className="h-5 w-5" />;
      case 'viento': return <Wind className="h-5 w-5" />;
      case 'calor': return <Flame className="h-5 w-5" />;
      default: return <AlertTriangle className="h-5 w-5" />;
    }
  };

  const getPhaseData = (phase: 'antes' | 'durante' | 'despu√©s'): ClimatePhase => {
    switch (phase) {
      case 'antes':
        return {
          phase: 'antes',
          title: 'PREPARACI√ìN',
          icon: 'üõ°Ô∏è',
          color: 'bg-blue-500',
          actions: ['Prevenir', 'Proteger', 'Planificar']
        };
      case 'durante':
        return {
          phase: 'durante',
          title: 'EMERGENCIA',
          icon: '‚ö°',
          color: 'bg-red-500',
          actions: ['Actuar', 'Protegerse', 'Documentar']
        };
      case 'despu√©s':
        return {
          phase: 'despu√©s',
          title: 'RECUPERACI√ìN',
          icon: 'üîÑ',
          color: 'bg-green-500',
          actions: ['Evaluar', 'Recuperar', 'Mejorar']
        };
    }
  };

  const handleAlertClick = (alert: WeatherAlert) => {
    const alertMessage: Message = {
      id: Date.now().toString(),
      text: `Quiero informaci√≥n detallada sobre la ${alert.title} en ${alert.region}`,
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, alertMessage]);
    setIsTyping(true);

    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: generateWeatherResponse(alert),
        isBot: true,
        timestamp: new Date(),
        category: "clima",
        weatherAlert: alert
      };

      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const generateWeatherResponse = (alert: WeatherAlert): string => {
    return `üå¶Ô∏è **${alert.title} - ${alert.region}**

**üìä SITUACI√ìN ACTUAL:**
‚Ä¢ Probabilidad: ${alert.probability}%
‚Ä¢ Severidad: ${alert.severity.toUpperCase()}
‚Ä¢ Duraci√≥n: ${alert.startDate.toLocaleDateString()} - ${alert.endDate.toLocaleDateString()}
‚Ä¢ Impacto: ${alert.impact}

**üéØ RECOMENDACIONES POR FASE:**

**üõ°Ô∏è ANTES (Preparaci√≥n):**
${alert.recommendations.before.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

**‚ö° DURANTE (Emergencia):**
${alert.recommendations.during.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

**üîÑ DESPU√âS (Recuperaci√≥n):**
${alert.recommendations.after.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

**üí∞ FINANCIAMIENTO DISPONIBLE:**
${alert.financing.available ? 
  `‚Ä¢ Programas: ${alert.financing.programs.join(', ')}\n‚Ä¢ Requisitos: ${alert.financing.requirements.join(', ')}` :
  'No hay programas espec√≠ficos disponibles actualmente'
}

¬øNecesitas ayuda con alguna fase espec√≠fica?`;
  };

  const sendMessage = () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsTyping(true);

    setTimeout(() => {
      const botResponse = generateClimateResponse(inputValue);
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        isBot: true,
        timestamp: new Date(),
        category: "clima"
      };

      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1500);

    setInputValue('');
  };

  const generateClimateResponse = (input: string): string => {
    const lowerInput = input.toLowerCase();
    
    if (lowerInput.includes('antes') || lowerInput.includes('preparar') || lowerInput.includes('prevenir')) {
      return `üõ°Ô∏è **PREPARACI√ìN ANTES DEL EVENTO CLIM√ÅTICO:**

**üìã ACCIONES PRIORITARIAS:**
1. **Monitoreo constante** - Revisar pron√≥sticos diarios
2. **Protecci√≥n f√≠sica** - Instalar coberturas, mallas, cortavientos
3. **Recursos h√≠dricos** - Almacenar agua, revisar sistemas de riego
4. **Seguros agr√≠colas** - Verificar p√≥lizas vigentes
5. **Insumos de emergencia** - Tener fungicidas, fertilizantes listos

**üí∞ FINANCIAMIENTO PREVENTIVO:**
‚Ä¢ Cr√©ditos para infraestructura resiliente
‚Ä¢ Subsidios para sistemas de protecci√≥n
‚Ä¢ Seguros con cobertura ampliada

**‚è∞ CRONOGRAMA RECOMENDADO:**
‚Ä¢ 15 d√≠as antes: Planificaci√≥n y compras
‚Ä¢ 7 d√≠as antes: Instalaci√≥n de protecciones
‚Ä¢ 3 d√≠as antes: Verificaci√≥n final

¬øQu√© evento espec√≠fico te preocupa?`;
    }
    
    if (lowerInput.includes('durante') || lowerInput.includes('emergencia') || lowerInput.includes('ahora')) {
      return `‚ö° **ACCIONES DURANTE LA EMERGENCIA CLIM√ÅTICA:**

**üö® PRIORIDADES INMEDIATAS:**
1. **Seguridad personal** - No arriesgar vidas por cultivos
2. **Documentaci√≥n** - Tomar fotos/videos de da√±os
3. **Comunicaci√≥n** - Reportar a autoridades locales
4. **Monitoreo** - Seguir evoluci√≥n del evento

**üì± CONTACTOS DE EMERGENCIA:**
‚Ä¢ SENAMHI: 2-2445512
‚Ä¢ Defensa Civil: 165
‚Ä¢ SENASAG: 800-10-2020

**üì∏ DOCUMENTAR DA√ëOS:**
‚Ä¢ Fotos antes, durante y despu√©s
‚Ä¢ Videos de la situaci√≥n
‚Ä¢ Registro de p√©rdidas

**üí° RECUERDA:** Tu seguridad es lo m√°s importante. Los cultivos se pueden recuperar.

¬øEst√°s enfrentando una emergencia ahora?`;
    }
    
    if (lowerInput.includes('despu√©s') || lowerInput.includes('recuperar') || lowerInput.includes('da√±os')) {
      return `üîÑ **RECUPERACI√ìN DESPU√âS DEL EVENTO:**

**üìä EVALUACI√ìN DE DA√ëOS:**
1. **Inspecci√≥n detallada** - Revisar cada parcela
2. **Clasificaci√≥n de da√±os** - Leve, moderado, severo, total
3. **Documentaci√≥n completa** - Fotos, mediciones, reportes
4. **Valorizaci√≥n econ√≥mica** - Calcular p√©rdidas

**üí∞ GESTI√ìN DE SEGUROS:**
‚Ä¢ Reportar siniestro en 48-72 horas
‚Ä¢ Presentar documentaci√≥n completa
‚Ä¢ Solicitar evaluaci√≥n t√©cnica
‚Ä¢ Seguir proceso de compensaci√≥n

**üå± PLAN DE RECUPERACI√ìN:**
‚Ä¢ Rehabilitaci√≥n de suelos
‚Ä¢ Replantaci√≥n estrat√©gica
‚Ä¢ Mejoras en infraestructura
‚Ä¢ Diversificaci√≥n de cultivos

**üéØ OPORTUNIDADES:**
‚Ä¢ Acceso a cr√©ditos blandos
‚Ä¢ Programas de reconstrucci√≥n
‚Ä¢ Capacitaci√≥n en resiliencia

¬øQu√© tipo de da√±os has identificado?`;
    }

    if (lowerInput.includes('financiamiento') || lowerInput.includes('seguro') || lowerInput.includes('cr√©dito')) {
      return `üí∞ **FINANCIAMIENTO Y SEGUROS CLIM√ÅTICOS:**

**üõ°Ô∏è SEGUROS DISPONIBLES:**
‚Ä¢ **SAU (Seguro Agr√≠cola Universal)** - Cobertura b√°sica
‚Ä¢ **PSAEC** - Eventos clim√°ticos espec√≠ficos
‚Ä¢ **Seguro Ganadero** - Protecci√≥n de animales
‚Ä¢ **Microseguros** - Para peque√±os productores

**üí≥ CR√âDITOS ESPECIALES:**
‚Ä¢ **BDP Agro** - Tasas preferenciales 5.5%
‚Ä¢ **Banco Uni√≥n** - L√≠nea clim√°tica 6%
‚Ä¢ **CRECER** - Microcr√©ditos rurales
‚Ä¢ **Fondo Verde** - Proyectos sostenibles

**üìã REQUISITOS GENERALES:**
‚Ä¢ Registro en SENASAG
‚Ä¢ C√©dula de identidad
‚Ä¢ T√≠tulo de propiedad o contrato
‚Ä¢ Plan de inversi√≥n

**‚ö° FONDOS DE EMERGENCIA:**
‚Ä¢ Fondo de Contingencia Nacional
‚Ä¢ Programa de Asistencia T√©cnica
‚Ä¢ Subsidios por desastres naturales

¬øNecesitas ayuda con alg√∫n tr√°mite espec√≠fico?`;
    }

    return `üå¶Ô∏è Como tu asistente clim√°tico, puedo ayudarte con:

**üìä INFORMACI√ìN DISPONIBLE:**
‚Ä¢ Pron√≥sticos detallados de SENAMHI
‚Ä¢ Alertas tempranas por regi√≥n
‚Ä¢ Recomendaciones por fase (antes/durante/despu√©s)
‚Ä¢ Financiamiento y seguros disponibles

**üéØ PREG√öNTAME SOBRE:**
‚Ä¢ "¬øC√≥mo prepararme para sequ√≠a?"
‚Ä¢ "¬øQu√© hacer durante granizada?"
‚Ä¢ "¬øC√≥mo recuperarme despu√©s de helada?"
‚Ä¢ "¬øQu√© seguros necesito?"

**üì± TAMBI√âN PUEDO:**
‚Ä¢ Analizar fotos de da√±os clim√°ticos
‚Ä¢ Conectarte con t√©cnicos especializados
‚Ä¢ Ayudarte con tr√°mites de seguros

¬øQu√© informaci√≥n espec√≠fica necesitas?`;
  };

  const quickClimateActions = [
    { 
      icon: Shield, 
      text: 'Preparaci√≥n', 
      description: 'Antes del evento',
      action: () => setInputValue('¬øC√≥mo prepararme antes de un evento clim√°tico?'),
      color: 'bg-blue-50 hover:bg-blue-100 border-blue-200'
    },
    { 
      icon: Zap, 
      text: 'Emergencia', 
      description: 'Durante el evento',
      action: () => setInputValue('¬øQu√© hacer durante una emergencia clim√°tica?'),
      color: 'bg-red-50 hover:bg-red-100 border-red-200'
    },
    { 
      icon: Activity, 
      text: 'Recuperaci√≥n', 
      description: 'Despu√©s del evento',
      action: () => setInputValue('¬øC√≥mo recuperarme despu√©s de da√±os clim√°ticos?'),
      color: 'bg-green-50 hover:bg-green-100 border-green-200'
    },
    { 
      icon: DollarSign, 
      text: 'Financiamiento', 
      description: 'Seguros y cr√©ditos',
      action: () => setInputValue('¬øQu√© financiamiento est√° disponible para eventos clim√°ticos?'),
      color: 'bg-yellow-50 hover:bg-yellow-100 border-yellow-200'
    },
    { 
      icon: TrendingUp, 
      text: 'Pron√≥sticos', 
      description: 'Datos SENAMHI',
      action: () => setInputValue('¬øCu√°l es el pron√≥stico clim√°tico para mi regi√≥n?'),
      color: 'bg-purple-50 hover:bg-purple-100 border-purple-200'
    },
    { 
      icon: Upload, 
      text: 'Reportar Da√±o', 
      description: 'Documentar p√©rdidas',
      action: () => fileInputRef.current?.click(),
      color: 'bg-orange-50 hover:bg-orange-100 border-orange-200'
    }
  ];

  const analysisOptions = [
    {
      icon: Bug,
      title: 'Detectar Plagas',
      subtitle: 'Identifica insectos da√±inos',
      color: 'bg-red-50 hover:bg-red-100 border-red-200'
    },
    {
      icon: Leaf,
      title: 'Enfermedades',
      subtitle: 'Analiza problemas en plantas',
      color: 'bg-orange-50 hover:bg-orange-100 border-orange-200'
    },
    {
      icon: Eye,
      title: 'Estado del Cultivo',
      subtitle: 'Eval√∫a salud general',
      color: 'bg-green-50 hover:bg-green-100 border-green-200'
    },
    {
      icon: Droplets,
      title: 'An√°lisis de Suelo',
      subtitle: 'Condiciones del terreno',
      color: 'bg-blue-50 hover:bg-blue-100 border-blue-200'
    }
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header Principal - M√°s Compacto */}
      <div className="bg-gradient-to-r from-green-600 via-blue-600 to-purple-600 text-white">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold mb-1">ü§ñ Wara - Asistente Clim√°tico</h1>
              <p className="text-sm opacity-90">Tu compa√±ero inteligente para la agricultura resiliente</p>
            </div>
            <div className="text-right">
              <Badge className="bg-white/20 text-white px-3 py-1">
                üö® {weatherAlerts.length} Alertas Activas
              </Badge>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-6 py-4">
        {/* Layout Principal - Optimizado para menos scroll */}
        <div className="grid grid-cols-1 xl:grid-cols-4 gap-4 h-[calc(100vh-140px)]">
          
          {/* Columna Izquierda - Alertas Compactas */}
          <div className="xl:col-span-1 space-y-4">
            
            {/* Alertas Clim√°ticas - M√°s Compactas */}
            <Card className="shadow-lg">
              <CardHeader className="bg-orange-50 py-3">
                <CardTitle className="flex items-center gap-2 text-orange-700 text-sm">
                  <AlertTriangle className="h-4 w-4" />
                  Alertas SENAMHI
                </CardTitle>
              </CardHeader>
              <CardContent className="p-3">
                <div className="space-y-2 max-h-48 overflow-y-auto">
                  {weatherAlerts.map((alert) => {
                    const IconComponent = alert.icon;
                    return (
                      <div 
                        key={alert.id} 
                        className={`p-3 rounded-lg border ${alert.color} cursor-pointer hover:shadow-md transition-all`}
                        onClick={() => handleAlertClick(alert)}
                      >
                        <div className="flex items-center justify-between mb-1">
                          <IconComponent className="h-4 w-4" />
                          <Badge className={`${alert.badgeColor} text-white text-xs`}>
                            {alert.probability}%
                          </Badge>
                        </div>
                        <h4 className="font-semibold text-xs mb-1">{alert.title}</h4>
                        <p className="text-xs text-gray-600 truncate">{alert.region}</p>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>

            {/* Acciones R√°pidas - Grid Compacto */}
            <Card className="shadow-lg">
              <CardHeader className="bg-blue-50 py-3">
                <CardTitle className="flex items-center gap-2 text-blue-700 text-sm">
                  <Zap className="h-4 w-4" />
                  Acciones R√°pidas
                </CardTitle>
              </CardHeader>
              <CardContent className="p-3">
                <div className="grid grid-cols-2 gap-2">
                  {quickClimateActions.slice(0, 4).map((action, index) => {
                    const IconComponent = action.icon;
                    return (
                      <Button
                        key={index}
                        variant="outline"
                        className={`h-auto p-2 ${action.color} border text-xs flex-col`}
                        onClick={action.action}
                      >
                        <IconComponent className="h-4 w-4 mb-1" />
                        <div className="text-center">
                          <div className="font-semibold">{action.text}</div>
                        </div>
                      </Button>
                    );
                  })}
                </div>
                
                {/* Botones adicionales en fila */}
                <div className="grid grid-cols-2 gap-2 mt-2">
                  {quickClimateActions.slice(4).map((action, index) => {
                    const IconComponent = action.icon;
                    return (
                      <Button
                        key={index + 4}
                        variant="outline"
                        className={`h-auto p-2 ${action.color} border text-xs flex-col`}
                        onClick={action.action}
                      >
                        <IconComponent className="h-4 w-4 mb-1" />
                        <div className="text-center">
                          <div className="font-semibold">{action.text}</div>
                        </div>
                      </Button>
                    );
                  })}
                </div>
              </CardContent>
            </Card>

            {/* An√°lisis de Im√°genes - M√°s Compacto */}
            <Card className="shadow-lg">
              <CardHeader className="bg-green-50 py-3">
                <CardTitle className="flex items-center gap-2 text-green-700 text-sm">
                  <Camera className="h-4 w-4" />
                  An√°lisis IA
                </CardTitle>
              </CardHeader>
              <CardContent className="p-3">
                <div className="grid grid-cols-2 gap-2 mb-3">
                  {analysisOptions.map((option, index) => {
                    const IconComponent = option.icon;
                    return (
                      <Button
                        key={index}
                        variant="outline"
                        className={`h-auto p-2 ${option.color} border text-xs flex-col`}
                        onClick={() => fileInputRef.current?.click()}
                      >
                        <IconComponent className="h-4 w-4 mb-1" />
                        <div className="text-center">
                          <div className="font-semibold text-xs">{option.title}</div>
                        </div>
                      </Button>
                    );
                  })}
                </div>
                
                <div className="p-3 border-2 border-dashed border-gray-300 rounded-lg text-center hover:border-blue-400 transition-colors cursor-pointer"
                     onClick={() => fileInputRef.current?.click()}>
                  <Upload className="h-6 w-6 mx-auto text-gray-400 mb-1" />
                  <p className="text-xs font-medium">Subir Imagen</p>
                  <p className="text-xs text-gray-500">JPG, PNG</p>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Columna Central y Derecha - Chat Expandido */}
          <div className="xl:col-span-3">
            <Card className="shadow-lg h-full">
              <CardHeader className="bg-gradient-to-r from-green-600 to-blue-600 text-white py-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Bot className="h-5 w-5" />
                    <div>
                      <CardTitle className="text-lg">Chat con Wara</CardTitle>
                      <CardDescription className="text-white/90 text-sm">
                        Preg√∫ntame sobre clima, cultivos, plagas, financiamiento y m√°s
                      </CardDescription>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge className="bg-white/20 text-white text-xs">
                      <Activity className="h-3 w-3 mr-1" />
                      En l√≠nea
                    </Badge>
                  </div>
                </div>
              </CardHeader>
              
              <CardContent className="p-0 flex flex-col h-[calc(100vh-220px)]">
                {/* √Årea de mensajes - Altura optimizada */}
                <ScrollArea className="flex-1 p-4">
                  <div className="space-y-3">
                    {messages.map((message) => (
                      <div key={message.id} className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}>
                        <div className={`max-w-[85%] p-3 rounded-lg shadow-sm ${
                          message.isBot 
                            ? 'bg-gray-100 text-gray-800 border border-gray-200' 
                            : 'bg-blue-500 text-white'
                        }`}>
                          {message.isBot && (
                            <div className="flex items-center gap-2 mb-1">
                              <Bot className="h-3 w-3" />
                              <span className="font-medium text-xs">Wara</span>
                            </div>
                          )}
                          <p className="text-sm whitespace-pre-line leading-relaxed">{message.text}</p>
                          <span className="text-xs opacity-70 mt-1 block">
                            {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                          </span>
                        </div>
                      </div>
                    ))}
                    
                    {isTyping && (
                      <div className="flex justify-start">
                        <div className="bg-gray-100 p-3 rounded-lg border border-gray-200 shadow-sm">
                          <div className="flex items-center gap-2 mb-1">
                            <Bot className="h-3 w-3" />
                            <span className="font-medium text-xs">Wara</span>
                          </div>
                          <div className="flex items-center gap-1">
                            <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"></div>
                            <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                            <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                          </div>
                        </div>
                      </div>
                    )}
                    <div ref={messagesEndRef} />
                  </div>
                </ScrollArea>
                
                {/* Input del chat - M√°s compacto */}
                <div className="p-4 border-t bg-gray-50">
                  <div className="flex gap-2 mb-3">
                    <Input
                      value={inputValue}
                      onChange={(e) => setInputValue(e.target.value)}
                      placeholder="Escribe tu consulta aqu√≠... (ej: ¬øC√≥mo prepararme para sequ√≠a?)"
                      onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                      className="flex-1 h-10"
                    />
                    <Button 
                      onClick={sendMessage}
                      disabled={!inputValue.trim() || isTyping}
                      className="bg-blue-500 hover:bg-blue-600 h-10 px-4"
                    >
                      <Send className="h-4 w-4" />
                    </Button>
                  </div>
                  
                  {/* Sugerencias r√°pidas - Una sola fila */}
                  <div className="flex flex-wrap gap-1">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setInputValue('¬øC√≥mo prepararme para una sequ√≠a?')}
                      className="text-xs h-7 px-2"
                    >
                      üåµ Sequ√≠a
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setInputValue('¬øQu√© seguros agr√≠colas necesito?')}
                      className="text-xs h-7 px-2"
                    >
                      üí∞ Seguros
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setInputValue('¬øC√≥mo detectar plagas en mis cultivos?')}
                      className="text-xs h-7 px-2"
                    >
                      üêõ Plagas
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setInputValue('¬øQu√© hacer despu√©s de una helada?')}
                      className="text-xs h-7 px-2"
                    >
                      ‚ùÑÔ∏è Helada
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setInputValue('¬øCu√°l es el pron√≥stico para mi regi√≥n?')}
                      className="text-xs h-7 px-2"
                    >
                      üìä Pron√≥stico
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Input file oculto */}
      <input
        ref={fileInputRef}
        type="file"
        accept="image/*"
        className="hidden"
        onChange={(e) => {
          const file = e.target.files?.[0];
          if (file) {
            setSelectedFile(file);
            setInputValue(`He subido una imagen de ${file.name} para an√°lisis`);
          }
        }}
      />
    </div>
  );
};

export default AsistentePage; 