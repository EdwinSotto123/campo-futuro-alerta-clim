import React, { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Progress } from "@/components/ui/progress";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { motion, AnimatePresence } from "framer-motion";
import { 
  Brain, 
  CloudRain, 
  Sun, 
  Snowflake, 
  Wind, 
  Thermometer,
  Droplets,
  Shield,
  AlertTriangle,
  CheckCircle,
  Clock,
  Target,
  Leaf,
  Sprout,
  Mountain,
  Zap,
  TrendingUp,
  Calendar,
  MapPin,
  Send,
  Lightbulb,
  BookOpen,
  Users,
  Globe,
  ArrowRight,
  ArrowLeft,
  ChevronDown,
  ChevronUp,
  Star,
  Heart,
  Eye,
  MessageSquare,
  Download,
  Share,
  Bookmark,
  RefreshCw,
  Settings,
  Filter,
  Search,
  Bell,
  Info,
  HelpCircle,
  Sparkles,
  TreePine,
  Wheat,
  Apple,
  Tractor,
  Factory,
  Recycle,
  Gauge,
  Plus,
  Minus,
  Edit,
  Save,
  Trash2,
  Copy,
  FileText,
  ClipboardList,
  Timer,
  DollarSign,
  TrendingDown,
  BarChart3,
  PieChart,
  Activity,
  Layers,
  Archive,
  FolderOpen,
  Bot,
  User,
  Loader2,
  PlayCircle,
  PauseCircle,
  StopCircle,
  RotateCcw,
  CheckSquare,
  Square,
  AlertCircle,
  XCircle
} from "lucide-react";

interface Cultivo {
  id: string;
  nombre: string;
  variedad: string;
  hectareas: number;
  fechaSiembra: string;
  etapaActual: string;
  riesgos: string[];
  prioridad: 'alta' | 'media' | 'baja';
}

interface PlanAccion {
  id: string;
  titulo: string;
  descripcion: string;
  cultivos: string[];
  fechaCreacion: string;
  fechaInicio: string;
  fechaFin: string;
  estado: 'pendiente' | 'en_progreso' | 'completado' | 'pausado';
  prioridad: 'critica' | 'alta' | 'media' | 'baja';
  categoria: string;
  tareas: Tarea[];
  presupuesto: number;
  progreso: number;
  notas: string;
  conversacionId?: string;
}

interface Tarea {
  id: string;
  titulo: string;
  descripcion: string;
  completada: boolean;
  fechaLimite: string;
  recursos: string[];
  costo: number;
  responsable: string;
  notas: string;
}

interface Conversacion {
  id: string;
  titulo: string;
  fechaCreacion: string;
  ultimaActividad: string;
  mensajes: Mensaje[];
  planGenerado?: string;
  etiquetas: string[];
  favorita: boolean;
  archivada: boolean;
}

interface Mensaje {
  id: string;
  tipo: 'usuario' | 'ia';
  contenido: string;
  timestamp: string;
  reacciones?: string[];
  adjuntos?: string[];
}

interface PerfilAgricultor {
  nombre: string;
  ubicacion: string;
  coordenadas?: { lat: number; lng: number };
  tipoFinca: 'familiar' | 'comercial' | 'cooperativa' | 'empresa';
  hectareasTotales: number;
  experiencia: number;
  cultivos: Cultivo[];
  presupuestoAnual: number;
  objetivos: string[];
  desafios: string[];
  tecnologias: string[];
  certificaciones: string[];
  contactoEmergencia: string;
  preferenciasIA: {
    nivelDetalle: 'basico' | 'intermedio' | 'avanzado';
    frecuenciaNotificaciones: 'alta' | 'media' | 'baja';
    tiposAlerta: string[];
    idiomaPreferido: 'es' | 'qu' | 'ay';
  };
}

const ConsejosPage = () => {
  const [activeTab, setActiveTab] = useState('chat');
  const [perfilCompleto, setPerfilCompleto] = useState(false);
  const [mostrarPerfil, setMostrarPerfil] = useState(false);
  
  // Estados del perfil
  const [perfil, setPerfil] = useState<PerfilAgricultor>({
    nombre: '',
    ubicacion: '',
    tipoFinca: 'familiar',
    hectareasTotales: 0,
    experiencia: 0,
    cultivos: [],
    presupuestoAnual: 0,
    objetivos: [],
    desafios: [],
    tecnologias: [],
    certificaciones: [],
    contactoEmergencia: '',
    preferenciasIA: {
      nivelDetalle: 'intermedio',
      frecuenciaNotificaciones: 'media',
      tiposAlerta: [],
      idiomaPreferido: 'es'
    }
  });

  // Estados del chat IA
  const [mensajeActual, setMensajeActual] = useState('');
  const [conversacionActiva, setConversacionActiva] = useState<string | null>(null);
  const [conversaciones, setConversaciones] = useState<Conversacion[]>([]);
  const [cargandoRespuesta, setCargandoRespuesta] = useState(false);
  
  // Estados del wizard de configuraci√≥n inicial
  const [mostrandoWizard, setMostrandoWizard] = useState(false);
  const [pasoActualWizard, setPasoActualWizard] = useState(0);
  const [tipoWizard, setTipoWizard] = useState<'desastres' | 'otros' | null>(null);
  const [subtipoDesastres, setSubtipoDesastres] = useState<'adaptacion' | 'sostenible' | null>(null);
  const [respuestaPersonalizada, setRespuestaPersonalizada] = useState('');
  const [mostrandoInputPersonalizado, setMostrandoInputPersonalizado] = useState(false);
  
  const [datosWizard, setDatosWizard] = useState({
    tipoPlan: '',
    subtipoPlan: '',
    fenomenoClimatico: '',
    faseDesastre: '',
    objetivo: '',
    presupuesto: '',
    tiempoDisponible: '',
    urgencia: '',
    necesitaProveedores: false,
    experienciaPrevia: '',
    cultivosAfectados: [] as string[],
    ubicacionEspecifica: '',
    recursosDisponibles: [] as string[]
  });

  // Preguntas para planes de desastres/cambio clim√°tico
  const preguntasDesastres = [
    {
      titulo: "¬øQu√© tipo de plan necesitas?",
      descripcion: "Selecciona el enfoque principal de tu plan",
      campo: "tipoPlan",
      opciones: [
        'Plan de Acci√≥n contra Desastres y Adaptaci√≥n al Cambio Clim√°tico',
        'Plan de Acci√≥n para Otros Prop√≥sitos'
      ],
      sinPersonalizado: true
    },
    {
      titulo: "¬øQu√© enfoque espec√≠fico necesitas?",
      descripcion: "Selecciona el tipo de adaptaci√≥n clim√°tica",
      campo: "subtipoPlan",
      opciones: [
        'Adaptaci√≥n contra Fen√≥menos Clim√°ticos Extremos',
        'Agricultura Sostenible y Resiliente',
        '‚úèÔ∏è Otros - Escr√≠belo t√∫ mismo'
      ],
      mostrarSi: () => tipoWizard === 'desastres',
      sinPersonalizado: false
    },
    {
      titulo: "¬øContra qu√© fen√≥meno te quieres preparar?",
      descripcion: "Selecciona el evento clim√°tico de mayor riesgo en tu zona",
      campo: "fenomenoClimatico",
      opciones: [
        'üåä Inundaciones y Lluvias Extremas',
        '‚òÄÔ∏è Sequ√≠as Prolongadas',
        '‚ùÑÔ∏è Heladas y Granizadas',
        'üå™Ô∏è Vientos Fuertes y Tormentas',
        'üî• Olas de Calor Extremo',
        'ü¶ó Plagas por Cambio Clim√°tico',
        '‚úèÔ∏è Otros - Escr√≠belo t√∫ mismo'
      ],
      mostrarSi: () => tipoWizard === 'desastres' && subtipoDesastres === 'adaptacion',
      sinPersonalizado: false
    },
    {
      titulo: "¬øEn qu√© fase te encuentras?",
      descripcion: "Esto determina las acciones prioritarias",
      campo: "faseDesastre",
      opciones: [
        '‚ö†Ô∏è ANTES: Preparaci√≥n y Prevenci√≥n',
        'üö® DURANTE: Respuesta de Emergencia',
        'üîÑ DESPU√âS: Recuperaci√≥n y Reconstrucci√≥n',
        '‚úèÔ∏è Otros - Escr√≠belo t√∫ mismo'
      ],
      mostrarSi: () => tipoWizard === 'desastres' && subtipoDesastres === 'adaptacion',
      sinPersonalizado: false
    },
    {
      titulo: "¬øQu√© pr√°ctica sostenible quieres implementar?",
      descripcion: "Selecciona el enfoque de sostenibilidad",
      campo: "objetivo",
      opciones: [
        'üå± Conservaci√≥n de Suelos y Agua',
        '‚ôªÔ∏è Agricultura Regenerativa',
        'üåø Manejo Integrado de Plagas',
        'üíß Sistemas de Riego Eficiente',
        'üåæ Diversificaci√≥n de Cultivos',
        'üîã Energ√≠as Renovables Agr√≠colas',
        '‚úèÔ∏è Otros - Escr√≠belo t√∫ mismo'
      ],
      mostrarSi: () => tipoWizard === 'desastres' && subtipoDesastres === 'sostenible',
      sinPersonalizado: false
    }
  ];

  // Preguntas para otros prop√≥sitos (formulario original)
  const preguntasOtros = [
    {
      titulo: "¬øQu√© quieres lograr?",
      descripcion: "Selecciona tu objetivo principal",
      campo: "objetivo",
      opciones: [
        'Mejorar producci√≥n de cultivos',
        'Proteger contra plagas',
        'Preparar para temporada seca',
        'Aumentar ingresos',
        'Implementar riego tecnificado',
        'Diversificar cultivos',
        '‚úèÔ∏è Otros - Escr√≠belo t√∫ mismo'
      ],
      sinPersonalizado: false
    }
  ];

  // Preguntas comunes para ambos tipos
  const preguntasComunes = [
    {
      titulo: "¬øCu√°nto dinero tienes disponible?",
      descripcion: "Esto nos ayuda a sugerir opciones realistas",
      campo: "presupuesto",
      opciones: [
        'Menos de 1,000 Bs',
        '1,000 - 5,000 Bs',
        '5,000 - 10,000 Bs',
        '10,000 - 20,000 Bs',
        'M√°s de 20,000 Bs',
        'Sin presupuesto definido',
        '‚úèÔ∏è Otros - Escr√≠belo t√∫ mismo'
      ],
      sinPersonalizado: false
    },
    {
      titulo: "¬øCu√°nto tiempo tienes?",
      descripcion: "Para implementar las recomendaciones",
      campo: "tiempoDisponible",
      opciones: [
        '1 semana',
        '2-4 semanas',
        '1-2 meses',
        '3+ meses',
        '‚úèÔ∏è Otros - Escr√≠belo t√∫ mismo'
      ],
      sinPersonalizado: false
    },
    {
      titulo: "¬øQu√© tan urgente es?",
      descripcion: "Esto afecta la prioridad de las recomendaciones",
      campo: "urgencia",
      opciones: [
        { valor: 'Muy urgente', color: 'bg-red-100 text-red-800 border-red-200' },
        { valor: 'Moderado', color: 'bg-yellow-100 text-yellow-800 border-yellow-200' },
        { valor: 'Puedo esperar', color: 'bg-green-100 text-green-800 border-green-200' },
        { valor: '‚úèÔ∏è Otros - Escr√≠belo t√∫ mismo', color: 'bg-blue-100 text-blue-800 border-blue-200' }
      ],
      sinPersonalizado: false
    },
    {
      titulo: "¬øNecesitas ayuda con proveedores?",
      descripcion: "Te podemos conectar con proveedores confiables",
      campo: "necesitaProveedores",
      opciones: [
        { valor: true, texto: 'S√≠, necesito ayuda', icono: CheckCircle },
        { valor: false, texto: 'No, ya tengo contactos', icono: XCircle },
        { valor: 'personalizado', texto: '‚úèÔ∏è Otros - Escr√≠belo t√∫ mismo', icono: Edit }
      ],
      sinPersonalizado: false
    },
    {
      titulo: "¬øCu√°l es tu experiencia?",
      descripcion: "Para adaptar las explicaciones a tu nivel",
      campo: "experienciaPrevia",
      opciones: [
        'Principiante',
        'Intermedio',
        'Experimentado',
        '‚úèÔ∏è Otros - Escr√≠belo t√∫ mismo'
      ],
      sinPersonalizado: false
    },
    {
      titulo: "¬øQu√© cultivos est√°n involucrados?",
      descripcion: "Puedes seleccionar varios (√∫ltimo paso)",
      campo: "cultivosAfectados",
      multiple: true,
      opciones: ['Papa', 'Quinua', 'Ma√≠z', 'Trigo', 'Haba', 'Tomate', 'Cebolla', 'Otros', '‚úèÔ∏è Escr√≠belo t√∫ mismo'],
      sinPersonalizado: false
    }
  ];

  // Funci√≥n para obtener las preguntas seg√∫n el tipo de wizard
  const obtenerPreguntasActuales = () => {
    let preguntas = [...preguntasDesastres];
    
    // Filtrar preguntas seg√∫n el tipo y subtipo
    preguntas = preguntas.filter(pregunta => {
      if (pregunta.mostrarSi) {
        return pregunta.mostrarSi();
      }
      return true;
    });

    // Si es "otros", agregar la pregunta espec√≠fica despu√©s de la primera
    if (tipoWizard === 'otros' && pasoActualWizard > 0) {
      preguntas = [preguntas[0], ...preguntasOtros];
    }

    // Agregar preguntas comunes al final
    return [...preguntas, ...preguntasComunes];
  };

  const preguntasWizard = obtenerPreguntasActuales();

  // Estados de planes de acci√≥n
  const [planes, setPlanes] = useState<PlanAccion[]>([]);
  const [planActivo, setPlanActivo] = useState<string | null>(null);
  const [mostrarFormularioPlan, setMostrarFormularioPlan] = useState(false);

  // Estados de cultivos
  const [mostrarFormularioCultivo, setMostrarFormularioCultivo] = useState(false);
  const [cultivoEditando, setCultivoEditando] = useState<string | null>(null);

  const cultivosDisponibles = [
    'Papa', 'Quinua', 'Ma√≠z', 'Trigo', 'Cebada', 'Haba', 'Oca', 'Papalisa',
    'Tomate', 'Cebolla', 'Zanahoria', 'Lechuga', 'Acelga', 'Espinaca',
    'Frijol', 'Arveja', 'Lenteja', 'Soya', 'Girasol', 'Caf√©', 'Cacao'
  ];

  const variedadesPorCultivo: Record<string, string[]> = {
    'Papa': ['Waych\'a', 'Imilla negra', 'Huaycha', 'Revoluci√≥n', 'Desiree', 'Alpha'],
    'Quinua': ['Real', 'Sajama', 'Patacamaya', 'Jancko Amaya', 'Surumi'],
    'Ma√≠z': ['Blanco Urubamba', 'Amarillo duro', 'Morado', 'Chulpi', 'Confite'],
    'Trigo': ['Totora', 'Illimani', 'Centenario', 'Mexicano'],
    'Tomate': ['R√≠o Grande', 'Platense', 'Cherry', 'Beef Master']
  };

  // Funci√≥n para crear nueva conversaci√≥n
  const crearNuevaConversacion = () => {
    const nuevaConversacion: Conversacion = {
      id: Date.now().toString(),
      titulo: 'Nueva Consulta',
      fechaCreacion: new Date().toISOString(),
      ultimaActividad: new Date().toISOString(),
      mensajes: [],
      etiquetas: [],
      favorita: false,
      archivada: false
    };
    
    setConversaciones(prev => [nuevaConversacion, ...prev]);
    setConversacionActiva(nuevaConversacion.id);
  };

  // Funci√≥n para iniciar wizard de configuraci√≥n
  const iniciarWizard = () => {
    setMostrandoWizard(true);
    setPasoActualWizard(0);
    setTipoWizard(null);
    setSubtipoDesastres(null);
    setRespuestaPersonalizada('');
    setMostrandoInputPersonalizado(false);
    
    // Limpiar datos previos
    setDatosWizard({
      tipoPlan: '',
      subtipoPlan: '',
      fenomenoClimatico: '',
      faseDesastre: '',
      objetivo: '',
      presupuesto: '',
      tiempoDisponible: '',
      urgencia: '',
      necesitaProveedores: false,
      experienciaPrevia: '',
      cultivosAfectados: [],
      ubicacionEspecifica: '',
      recursosDisponibles: []
    });
  };

  // Funci√≥n para avanzar en el wizard
  const siguientePasoWizard = () => {
    if (pasoActualWizard < preguntasWizard.length - 1) {
      setPasoActualWizard(prev => prev + 1);
    } else {
      // √öltimo paso: finalizar wizard e iniciar chat
      finalizarWizard();
    }
  };

  // Funci√≥n para retroceder en el wizard
  const pasoAnteriorWizard = () => {
    if (pasoActualWizard > 0) {
      setPasoActualWizard(prev => prev - 1);
    }
  };

  // Funci√≥n para finalizar wizard e iniciar chat
  const finalizarWizard = () => {
    setMostrandoWizard(false);
    
    // Crear mensaje de bienvenida personalizado
    const mensajeBienvenida: Mensaje = {
      id: Date.now().toString(),
      tipo: 'ia',
      contenido: `¬°Perfecto! He registrado toda tu informaci√≥n:

üéØ **Tu objetivo:** ${datosWizard.objetivo}
üí∞ **Presupuesto:** ${datosWizard.presupuesto}
‚è±Ô∏è **Tiempo disponible:** ${datosWizard.tiempoDisponible}
üö® **Urgencia:** ${datosWizard.urgencia}
üë• **Proveedores:** ${datosWizard.necesitaProveedores ? 'Necesita ayuda' : 'Ya tiene contactos'}
üìö **Experiencia:** ${datosWizard.experienciaPrevia}
üå± **Cultivos:** ${datosWizard.cultivosAfectados.join(', ')}

Ahora puedes hacerme cualquier pregunta espec√≠fica y te dar√© recomendaciones personalizadas basadas en esta informaci√≥n. 

¬øEn qu√© te gustar√≠a que te ayude primero?`,
      timestamp: new Date().toISOString()
    };

    if (conversacionActiva) {
      setConversaciones(prev => prev.map(conv => 
        conv.id === conversacionActiva 
          ? { 
              ...conv, 
              mensajes: [...conv.mensajes, mensajeBienvenida],
              ultimaActividad: new Date().toISOString(),
              titulo: `Plan: ${datosWizard.objetivo}`
            }
          : conv
      ));
    }
  };

  // Funci√≥n para manejar selecci√≥n en wizard
  const manejarSeleccionWizard = (valor: any) => {
    const preguntaActual = preguntasWizard[pasoActualWizard];
    
    // Verificar si se seleccion√≥ "Otros - Escr√≠belo t√∫ mismo"
    if (typeof valor === 'string' && valor.includes('‚úèÔ∏è Otros') || valor === 'personalizado' || valor.includes('‚úèÔ∏è Escr√≠belo')) {
      setMostrandoInputPersonalizado(true);
      return;
    }
    
    // Manejar l√≥gica especial para la primera pregunta
    if (preguntaActual.campo === 'tipoPlan') {
      if (valor.includes('Desastres')) {
        setTipoWizard('desastres');
      } else {
        setTipoWizard('otros');
      }
    }
    
    // Manejar l√≥gica para subtipo de desastres
    if (preguntaActual.campo === 'subtipoPlan') {
      if (valor.includes('Adaptaci√≥n')) {
        setSubtipoDesastres('adaptacion');
      } else if (valor.includes('Sostenible')) {
        setSubtipoDesastres('sostenible');
      }
    }
    
    if ('multiple' in preguntaActual && preguntaActual.multiple) {
      // Para selecci√≥n m√∫ltiple (cultivos)
      setDatosWizard(prev => ({
        ...prev,
        [preguntaActual.campo]: prev.cultivosAfectados.includes(valor)
          ? prev.cultivosAfectados.filter((item: string) => item !== valor)
          : [...prev.cultivosAfectados, valor]
      }));
    } else {
      // Para selecci√≥n √∫nica
      setDatosWizard(prev => ({
        ...prev,
        [preguntaActual.campo]: valor
      }));
    }
  };

  // Funci√≥n para manejar respuesta personalizada
  const manejarRespuestaPersonalizada = () => {
    if (respuestaPersonalizada.trim()) {
      const preguntaActual = preguntasWizard[pasoActualWizard];
      setDatosWizard(prev => ({
        ...prev,
        [preguntaActual.campo]: respuestaPersonalizada
      }));
      setMostrandoInputPersonalizado(false);
      setRespuestaPersonalizada('');
    }
  };

  // Funci√≥n para verificar si puede continuar
  const puedeAvanzar = () => {
    // Si est√° mostrando input personalizado, no puede avanzar hasta que guarde
    if (mostrandoInputPersonalizado) {
      return false;
    }
    
    const preguntaActual = preguntasWizard[pasoActualWizard];
    const valorActual = datosWizard[preguntaActual.campo as keyof typeof datosWizard];
    
    if ('multiple' in preguntaActual && preguntaActual.multiple) {
      return Array.isArray(valorActual) && valorActual.length > 0;
    }
    
    return valorActual !== '' && valorActual !== false && valorActual !== undefined;
  };

  // Funci√≥n para generar plan desde datos del wizard
  const generarPlanPersonalizadoChat = () => {
    if (!conversacionActiva) return;

    const prompt = `
**Informaci√≥n del Agricultor:**
- Objetivo: ${datosWizard.objetivo}
- Presupuesto disponible: ${datosWizard.presupuesto}
- Tiempo disponible: ${datosWizard.tiempoDisponible}
- Necesita proveedores: ${datosWizard.necesitaProveedores ? 'S√≠' : 'No'}
- Urgencia: ${datosWizard.urgencia}
- Experiencia previa: ${datosWizard.experienciaPrevia}
- Cultivos afectados: ${datosWizard.cultivosAfectados.join(', ')}
`;

    setCargandoRespuesta(true);

    // Agregar el prompt como mensaje del usuario
    const mensajeUsuario: Mensaje = {
      id: Date.now().toString(),
      tipo: 'usuario',
      contenido: `Genera un plan detallado basado en mi informaci√≥n:\n\n${prompt}`,
      timestamp: new Date().toISOString()
    };

    setConversaciones(prev => prev.map(conv => 
      conv.id === conversacionActiva 
        ? { 
            ...conv, 
            mensajes: [...conv.mensajes, mensajeUsuario],
            ultimaActividad: new Date().toISOString()
          }
        : conv
    ));

    // Generar respuesta de IA
    setTimeout(() => {
      const respuestaIA = generarPlanPersonalizado(datosWizard);
      
      const mensajeIA: Mensaje = {
        id: (Date.now() + 1).toString(),
        tipo: 'ia',
        contenido: respuestaIA,
        timestamp: new Date().toISOString()
      };

      setConversaciones(prev => prev.map(conv => 
        conv.id === conversacionActiva 
          ? { 
              ...conv, 
              mensajes: [...conv.mensajes, mensajeIA],
              ultimaActividad: new Date().toISOString()
            }
          : conv
      ));

      setCargandoRespuesta(false);
    }, 3000);
  };

  // Funci√≥n para enviar mensaje a la IA
  const enviarMensaje = async () => {
    if (!mensajeActual.trim() || !conversacionActiva) return;

    const nuevoMensaje: Mensaje = {
      id: Date.now().toString(),
      tipo: 'usuario',
      contenido: mensajeActual,
      timestamp: new Date().toISOString()
    };

    // Agregar mensaje del usuario
    setConversaciones(prev => prev.map(conv => 
      conv.id === conversacionActiva 
        ? { 
            ...conv, 
            mensajes: [...conv.mensajes, nuevoMensaje],
            ultimaActividad: new Date().toISOString(),
            titulo: conv.mensajes.length === 0 ? mensajeActual.slice(0, 50) + '...' : conv.titulo
          }
        : conv
    ));

    setMensajeActual('');
    setCargandoRespuesta(true);

    // Simular respuesta de IA
    setTimeout(() => {
      const respuestaIA = generarRespuestaIA(mensajeActual);
      
      const mensajeIA: Mensaje = {
        id: (Date.now() + 1).toString(),
        tipo: 'ia',
        contenido: respuestaIA,
        timestamp: new Date().toISOString()
      };

      setConversaciones(prev => prev.map(conv => 
        conv.id === conversacionActiva 
          ? { 
              ...conv, 
              mensajes: [...conv.mensajes, mensajeIA],
              ultimaActividad: new Date().toISOString()
            }
          : conv
      ));

      setCargandoRespuesta(false);
    }, 2500);
  };

  // Funci√≥n para generar plan personalizado desde wizard
  const generarPlanPersonalizado = (datos: typeof datosWizard): string => {
    return `**üéØ PLAN PERSONALIZADO GENERADO**

Bas√°ndome en la informaci√≥n que proporcionaste, he creado un plan espec√≠fico para tu situaci√≥n:

**üìã RESUMEN DE TU SOLICITUD:**
- **Objetivo:** ${datos.objetivo}
- **Presupuesto:** ${datos.presupuesto}
- **Tiempo disponible:** ${datos.tiempoDisponible}
- **Urgencia:** ${datos.urgencia}

**üìÖ PLAN DE ACCI√ìN DETALLADO:**

**FASE 1: PREPARACI√ìN (Semana 1)**
1. **Evaluaci√≥n inicial del terreno**
   - An√°lisis de suelo y condiciones actuales
   - Inventario de recursos disponibles
   - Costo estimado: 200-500 Bs

2. **Adquisici√≥n de materiales**
   ${datos.necesitaProveedores ? '- Te ayudo a contactar proveedores confiables' : '- Usar recursos disponibles'}
   - Lista de materiales necesarios
   - Comparaci√≥n de precios

**FASE 2: IMPLEMENTACI√ìN (Semanas 2-3)**
3. **Ejecuci√≥n de medidas**
   - Aplicaci√≥n de t√©cnicas espec√≠ficas para ${datos.cultivosAfectados.join(', ')}
   - Monitoreo diario de progreso
   - Ajustes seg√∫n condiciones clim√°ticas

4. **Seguimiento intensivo**
   - Control de plagas y enfermedades
   - Riego y fertilizaci√≥n programada

**FASE 3: EVALUACI√ìN (Semana 4)**
5. **An√°lisis de resultados**
   - Medici√≥n de indicadores clave
   - Documentaci√≥n de lecciones aprendidas
   - Planificaci√≥n de pr√≥ximos pasos

**üí∞ PRESUPUESTO DETALLADO:**
- Materiales: 60% del presupuesto
- Mano de obra: 25% del presupuesto  
- Contingencias: 15% del presupuesto
- **Total estimado:** ${datos.presupuesto}

**üìû PROVEEDORES RECOMENDADOS:**
${datos.necesitaProveedores ? `
- Semillas certificadas: Agro Semillas La Paz
- Fertilizantes: Distribuidora Agr√≠cola Central
- Herramientas: Ferreter√≠a Agr√≠cola Boliviana
` : 'Utilizar√°s tus recursos actuales disponibles'}

**‚ö†Ô∏è CONSIDERACIONES ESPECIALES:**
- Nivel de urgencia: ${datos.urgencia}
- Experiencia previa: ${datos.experienciaPrevia}

**üéØ PROBABILIDAD DE √âXITO: 90%**

¬øTe gustar√≠a que convierta este plan en tareas espec√≠ficas que puedas seguir paso a paso?`;
  };

  // Funci√≥n para generar respuesta de IA contextualizada
  const generarRespuestaIA = (pregunta: string): string => {
    const preguntaLower = pregunta.toLowerCase();
    
    if (preguntaLower.includes('plan') || preguntaLower.includes('planificar')) {
      return `**Plan de Acci√≥n Personalizado Generado**

Bas√°ndome en tu perfil agr√≠cola y la consulta realizada, he creado un plan de acci√≥n espec√≠fico:

üéØ **Objetivo Principal:** ${pregunta}

üìã **Plan Recomendado:**
1. **Evaluaci√≥n inicial** (Semana 1)
   - An√°lisis de suelo y condiciones actuales
   - Inventario de recursos disponibles
   - Identificaci√≥n de riesgos espec√≠ficos

2. **Implementaci√≥n** (Semanas 2-4)
   - Preparaci√≥n de materiales y herramientas
   - Ejecuci√≥n de medidas preventivas
   - Monitoreo continuo de indicadores

3. **Seguimiento** (Semanas 5-8)
   - Evaluaci√≥n de resultados
   - Ajustes seg√∫n condiciones
   - Documentaci√≥n de lecciones aprendidas

üí∞ **Presupuesto estimado:** 1,500 - 3,000 Bs
‚è±Ô∏è **Duraci√≥n:** 6-8 semanas
üéØ **Probabilidad de √©xito:** 85%

¬øTe gustar√≠a que genere un plan detallado con tareas espec√≠ficas?`;
    }

    if (preguntaLower.includes('cultivo') || preguntaLower.includes('sembrar')) {
      return `**Recomendaciones para tus Cultivos**

Considerando tu ubicaci√≥n y experiencia, aqu√≠ tienes recomendaciones espec√≠ficas:

üå± **Para tus cultivos actuales:**
${perfil.cultivos.map(c => `- **${c.nombre}**: Actualmente en ${c.etapaActual}, requiere atenci√≥n en ${c.riesgos.join(', ')}`).join('\n')}

üìÖ **Calendario de actividades:**
- **Esta semana:** Monitoreo de plagas y riego
- **Pr√≥ximas 2 semanas:** Fertilizaci√≥n foliar
- **Mes siguiente:** Preparaci√≥n para cosecha

‚ö†Ô∏è **Alertas importantes:**
- Riesgo de heladas en los pr√≥ximos 5 d√≠as
- Condiciones favorables para tiz√≥n tard√≠o
- Precio de fertilizantes en alza (+15%)

üîß **Acciones recomendadas:**
1. Aplicar protecci√≥n antiheladas
2. Monitorear humedad del suelo
3. Preparar cosecha temprana si es necesario

¬øNecesitas un plan espec√≠fico para alg√∫n cultivo?`;
    }

    return `**An√°lisis IA Personalizado**

He analizado tu consulta considerando tu perfil agr√≠cola:

üìç **Tu contexto:**
- Ubicaci√≥n: ${perfil.ubicacion || 'No especificada'}
- Experiencia: ${perfil.experiencia} a√±os
- Cultivos principales: ${perfil.cultivos.map(c => c.nombre).join(', ') || 'No especificados'}

üí° **Recomendaci√≥n espec√≠fica:**
Bas√°ndome en tu situaci√≥n particular, te sugiero enfocarte en pr√°cticas de agricultura clim√°ticamente inteligente que se adapten a tu nivel de experiencia y recursos disponibles.

üéØ **Pr√≥ximos pasos:**
1. Completa tu perfil agr√≠cola para recomendaciones m√°s precisas
2. Define tus objetivos espec√≠ficos para esta temporada
3. Considera implementar tecnolog√≠as apropiadas para tu escala

¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico o genere un plan de acci√≥n detallado?`;
  };

  // Funci√≥n para generar plan de acci√≥n desde conversaci√≥n
  const generarPlanDesdeConversacion = (conversacionId: string) => {
    const conversacion = conversaciones.find(c => c.id === conversacionId);
    if (!conversacion) return;

    const nuevoPlan: PlanAccion = {
      id: Date.now().toString(),
      titulo: `Plan: ${conversacion.titulo}`,
      descripcion: 'Plan generado autom√°ticamente desde conversaci√≥n con IA',
      cultivos: perfil.cultivos.map(c => c.id),
      fechaCreacion: new Date().toISOString(),
      fechaInicio: new Date().toISOString(),
      fechaFin: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 d√≠as
      estado: 'pendiente',
      prioridad: 'media',
      categoria: 'General',
      tareas: [
        {
          id: '1',
          titulo: 'Evaluaci√≥n inicial',
          descripcion: 'Realizar diagn√≥stico de la situaci√≥n actual',
          completada: false,
          fechaLimite: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
          recursos: ['Herramientas de evaluaci√≥n'],
          costo: 0,
          responsable: 'Agricultor',
          notas: ''
        },
        {
          id: '2',
          titulo: 'Implementaci√≥n de medidas',
          descripcion: 'Ejecutar las recomendaciones de la IA',
          completada: false,
          fechaLimite: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(),
          recursos: ['Materiales espec√≠ficos'],
          costo: 500,
          responsable: 'Agricultor',
          notas: ''
        }
      ],
      presupuesto: 1000,
      progreso: 0,
      notas: '',
      conversacionId: conversacionId
    };

    setPlanes(prev => [nuevoPlan, ...prev]);
    
    // Marcar conversaci√≥n como generadora de plan
    setConversaciones(prev => prev.map(conv => 
      conv.id === conversacionId 
        ? { ...conv, planGenerado: nuevoPlan.id }
        : conv
    ));

    setActiveTab('planes');
    setPlanActivo(nuevoPlan.id);
  };

  // Funci√≥n para agregar cultivo
  const agregarCultivo = (nuevoCultivo: Omit<Cultivo, 'id'>) => {
    const cultivo: Cultivo = {
      id: Date.now().toString(),
      ...nuevoCultivo
    };
    
    setPerfil(prev => ({
      ...prev,
      cultivos: [...prev.cultivos, cultivo]
    }));
    
    setMostrarFormularioCultivo(false);
  };

  // Funci√≥n para actualizar progreso de plan
  const actualizarProgresoPlan = (planId: string) => {
    setPlanes(prev => prev.map(plan => {
      if (plan.id === planId) {
        const tareasCompletadas = plan.tareas.filter(t => t.completada).length;
        const progreso = (tareasCompletadas / plan.tareas.length) * 100;
        const estado = progreso === 100 ? 'completado' : progreso > 0 ? 'en_progreso' : 'pendiente';
        
        return { ...plan, progreso, estado };
      }
      return plan;
    }));
  };

  // Funci√≥n para completar tarea
  const completarTarea = (planId: string, tareaId: string) => {
    setPlanes(prev => prev.map(plan => {
      if (plan.id === planId) {
        const nuevasTareas = plan.tareas.map(tarea => 
          tarea.id === tareaId ? { ...tarea, completada: !tarea.completada } : tarea
        );
        return { ...plan, tareas: nuevasTareas };
      }
      return plan;
    }));
    
    actualizarProgresoPlan(planId);
  };

  // Verificar si el perfil est√° completo
  useEffect(() => {
    const completo = perfil.nombre && perfil.ubicacion && perfil.cultivos.length > 0;
    setPerfilCompleto(!!completo);
  }, [perfil]);

  // Crear conversaci√≥n inicial si no existe
  useEffect(() => {
    if (conversaciones.length === 0) {
      crearNuevaConversacion();
    }
  }, []);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center space-y-4">
        <div className="flex items-center justify-center gap-3">
          <Brain className="h-8 w-8 text-agriculture-terracotta" />
          <h1 className="text-4xl font-bold bg-gradient-to-r from-agriculture-terracotta to-agriculture-earth bg-clip-text text-transparent">
            Asistente IA Agr√≠cola Avanzado
          </h1>
          <Sparkles className="h-8 w-8 text-yellow-500" />
        </div>
        <p className="text-lg text-muted-foreground max-w-3xl mx-auto">
          Sistema inteligente que crea <strong>planes de acci√≥n personalizados</strong>, guarda conversaciones 
          y gestiona tus cultivos para una agricultura m√°s eficiente y sostenible.
        </p>
        <div className="flex items-center justify-center gap-2">
          <Badge className="bg-blue-100 text-blue-800">Planes Personalizados</Badge>
          <Badge className="bg-green-100 text-green-800">Gesti√≥n de Cultivos</Badge>
          <Badge className="bg-purple-100 text-purple-800">Conversaciones Guardadas</Badge>
          <Badge className="bg-orange-100 text-orange-800">IA Contextual</Badge>
        </div>
      </div>

      {/* Alerta de perfil incompleto */}
      {!perfilCompleto && (
        <Alert className="bg-yellow-50 border-yellow-200">
          <AlertCircle className="h-4 w-4 text-yellow-600" />
          <AlertDescription className="text-yellow-800">
            <strong>Completa tu perfil agr√≠cola</strong> para obtener recomendaciones m√°s precisas y planes de acci√≥n personalizados.
            <Button 
              variant="link" 
              className="p-0 ml-2 text-yellow-800 underline"
              onClick={() => setMostrarPerfil(true)}
            >
              Completar ahora ‚Üí
            </Button>
          </AlertDescription>
        </Alert>
      )}

      {/* Navegaci√≥n principal */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="chat" className="flex items-center gap-2">
            <MessageSquare className="h-4 w-4" />
            Chat IA
          </TabsTrigger>
          <TabsTrigger value="planes" className="flex items-center gap-2">
            <ClipboardList className="h-4 w-4" />
            Planes de Acci√≥n
          </TabsTrigger>
          <TabsTrigger value="cultivos" className="flex items-center gap-2">
            <Sprout className="h-4 w-4" />
            Mis Cultivos
          </TabsTrigger>
          <TabsTrigger value="perfil" className="flex items-center gap-2">
            <User className="h-4 w-4" />
            Mi Perfil
          </TabsTrigger>
        </TabsList>
        
        {/* Tab: Chat IA */}
        <TabsContent value="chat" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-4 h-[600px]">
            {/* Lista de conversaciones */}
            <div className="lg:col-span-1 space-y-2">
              <div className="flex items-center justify-between">
                <h3 className="font-semibold">Conversaciones</h3>
                <Button size="sm" onClick={crearNuevaConversacion}>
                  <Plus className="h-4 w-4" />
                </Button>
              </div>
              
              <div className="space-y-2 max-h-[500px] overflow-y-auto">
                {conversaciones.map((conv) => (
                  <Card 
                    key={conv.id}
                    className={`cursor-pointer transition-all ${
                      conversacionActiva === conv.id ? 'ring-2 ring-blue-500' : ''
                    }`}
                    onClick={() => setConversacionActiva(conv.id)}
                  >
                    <CardContent className="p-3">
                      <div className="flex items-start justify-between">
                        <div className="flex-1 min-w-0">
                          <p className="font-medium text-sm truncate">{conv.titulo}</p>
                          <p className="text-xs text-muted-foreground">
                            {new Date(conv.ultimaActividad).toLocaleDateString()}
                          </p>
                          <div className="flex items-center gap-1 mt-1">
                            <Badge variant="outline" className="text-xs">
                              {conv.mensajes.length} mensajes
                            </Badge>
                            {conv.planGenerado && (
                              <Badge className="text-xs bg-green-100 text-green-800">
                                Plan creado
                              </Badge>
                            )}
                          </div>
                        </div>
                        {conv.favorita && (
                          <Star className="h-4 w-4 text-yellow-500 fill-current" />
                        )}
                      </div>
              </CardContent>
            </Card>
                ))}
              </div>
            </div>

            {/* √Årea de chat */}
            <div className="lg:col-span-3 flex flex-col">
              {mostrandoWizard ? (
                /* Wizard de configuraci√≥n inicial */
                <div className="flex-1 flex flex-col">
                  {/* Header del wizard */}
                  <div className="p-4 border-b bg-blue-50">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="font-semibold text-blue-800">Configuraci√≥n Inicial</h3>
                        <p className="text-sm text-blue-600">
                          Paso {pasoActualWizard + 1} de {preguntasWizard.length}
                        </p>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="w-32 bg-blue-200 rounded-full h-2">
                          <div 
                            className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                            style={{ width: `${((pasoActualWizard + 1) / preguntasWizard.length) * 100}%` }}
                          />
                        </div>
                        <span className="text-xs text-blue-600 font-medium">
                          {Math.round(((pasoActualWizard + 1) / preguntasWizard.length) * 100)}%
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Contenido del wizard */}
                  <div className="flex-1 flex items-center justify-center p-8">
                    <Card className="w-full max-w-2xl border-blue-200">
                      <CardHeader className="text-center">
                        <CardTitle className="text-2xl text-blue-800">
                          {preguntasWizard[pasoActualWizard]?.titulo}
                        </CardTitle>
                        <CardDescription className="text-lg">
                          {preguntasWizard[pasoActualWizard]?.descripcion}
                        </CardDescription>
              </CardHeader>
                      
                      <CardContent className="space-y-4">
                        {/* Input personalizado */}
                        {mostrandoInputPersonalizado ? (
                          <div className="space-y-4">
                            <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                              <h4 className="font-medium text-blue-800 mb-2">Escribe tu respuesta personalizada:</h4>
                              <Textarea
                                placeholder="Describe tu situaci√≥n espec√≠fica..."
                                value={respuestaPersonalizada}
                                onChange={(e) => setRespuestaPersonalizada(e.target.value)}
                                rows={4}
                                className="w-full"
                              />
                              <div className="flex gap-2 mt-3">
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => {
                                    setMostrandoInputPersonalizado(false);
                                    setRespuestaPersonalizada('');
                                  }}
                                >
                                  Cancelar
                                </Button>
                                <Button
                                  size="sm"
                                  onClick={manejarRespuestaPersonalizada}
                                  disabled={!respuestaPersonalizada.trim()}
                                  className="bg-blue-600 hover:bg-blue-700"
                                >
                                  <Save className="h-4 w-4 mr-2" />
                                  Guardar Respuesta
                                </Button>
                              </div>
                            </div>
                          </div>
                        ) : (
                          /* Renderizar opciones seg√∫n el tipo de pregunta */
                          preguntasWizard[pasoActualWizard]?.campo === 'urgencia' ? (
                          <div className="grid grid-cols-1 gap-3">
                            {(preguntasWizard[pasoActualWizard].opciones as Array<{valor: string, color: string}>).map((opcion) => (
                              <Button
                                key={opcion.valor}
                                variant={datosWizard.urgencia === opcion.valor ? "default" : "outline"}
                                size="lg"
                                className={`h-auto py-4 px-6 text-left justify-start ${
                                  datosWizard.urgencia === opcion.valor ? '' : opcion.color
                                }`}
                                onClick={() => manejarSeleccionWizard(opcion.valor)}
                              >
                                <div>
                                  <div className="font-medium">{opcion.valor}</div>
                                </div>
                              </Button>
                            ))}
                          </div>
                        ) : preguntasWizard[pasoActualWizard]?.campo === 'necesitaProveedores' ? (
                          <div className="grid grid-cols-1 gap-3">
                            {(preguntasWizard[pasoActualWizard].opciones as Array<{valor: boolean, texto: string, icono: any}>).map((opcion) => {
                              const IconComponent = opcion.icono;
                              return (
                                <Button
                                  key={opcion.valor.toString()}
                                  variant={datosWizard.necesitaProveedores === opcion.valor ? "default" : "outline"}
                                  size="lg"
                                  className="h-auto py-4 px-6 text-left justify-start"
                                  onClick={() => manejarSeleccionWizard(opcion.valor)}
                                >
                                  <IconComponent className="h-5 w-5 mr-3" />
                                  <div className="font-medium">{opcion.texto}</div>
                                </Button>
                              );
                            })}
                          </div>
                        ) : ('multiple' in preguntasWizard[pasoActualWizard] && preguntasWizard[pasoActualWizard].multiple) ? (
                          <div className="grid grid-cols-2 gap-3">
                            {(preguntasWizard[pasoActualWizard].opciones as string[]).map((opcion) => (
                              <Button
                                key={opcion}
                                variant={datosWizard.cultivosAfectados.includes(opcion) ? "default" : "outline"}
                                size="lg"
                                className="h-auto py-4 px-6 text-left justify-start"
                                onClick={() => manejarSeleccionWizard(opcion)}
                              >
                                {datosWizard.cultivosAfectados.includes(opcion) && (
                                  <CheckCircle className="h-4 w-4 mr-2" />
                                )}
                                <div className="font-medium">{opcion}</div>
                              </Button>
                            ))}
                          </div>
                        ) : (
                          <div className="grid grid-cols-1 gap-3">
                            {(preguntasWizard[pasoActualWizard]?.opciones as string[]).map((opcion) => (
                              <Button
                                key={opcion}
                                variant={datosWizard[preguntasWizard[pasoActualWizard].campo as keyof typeof datosWizard] === opcion ? "default" : "outline"}
                                size="lg"
                                className="h-auto py-4 px-6 text-left justify-start"
                                onClick={() => manejarSeleccionWizard(opcion)}
                              >
                                <div className="font-medium">{opcion}</div>
                              </Button>
                            ))}
                          </div>
                        )
                        )}
              </CardContent>
                      
                      <CardFooter className="flex justify-between">
                        <Button 
                          variant="outline" 
                          onClick={pasoAnteriorWizard}
                          disabled={pasoActualWizard === 0}
                        >
                          <ArrowLeft className="h-4 w-4 mr-2" />
                          Anterior
                </Button>
                        
                        <Button 
                          onClick={siguientePasoWizard}
                          disabled={!puedeAvanzar()}
                          className="bg-blue-600 hover:bg-blue-700"
                        >
                          {pasoActualWizard === preguntasWizard.length - 1 ? (
                            <>
                              <Sparkles className="h-4 w-4 mr-2" />
                              Empezar Chat
                            </>
                          ) : (
                            <>
                              Siguiente
                              <ArrowRight className="h-4 w-4 ml-2" />
                            </>
                          )}
                </Button>
              </CardFooter>
            </Card>
                  </div>
                </div>
              ) : conversacionActiva ? (
                <>
                  {/* Header del chat */}
                  <div className="flex items-center justify-between p-4 border-b">
                    <div>
                      <h3 className="font-semibold">
                        {conversaciones.find(c => c.id === conversacionActiva)?.titulo}
                      </h3>
                      <p className="text-sm text-muted-foreground">
                        Asistente IA especializado en agricultura andina
                      </p>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => generarPlanDesdeConversacion(conversacionActiva)}
                        disabled={!conversaciones.find(c => c.id === conversacionActiva)?.mensajes.length}
                      >
                        <ClipboardList className="h-4 w-4 mr-2" />
                        Generar Plan
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={generarPlanPersonalizadoChat}
                      >
                        <Sparkles className="h-4 w-4 mr-2" />
                        Plan Personalizado
                      </Button>
                      <Button variant="outline" size="sm">
                        <Download className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>

                  {/* Mensajes */}
                  <div className="flex-1 overflow-y-auto p-4 space-y-4">
                    {conversaciones.find(c => c.id === conversacionActiva)?.mensajes.map((mensaje) => (
                      <div 
                        key={mensaje.id}
                        className={`flex ${mensaje.tipo === 'usuario' ? 'justify-end' : 'justify-start'}`}
                      >
                        <div className={`flex items-start gap-3 max-w-[80%] ${
                          mensaje.tipo === 'usuario' ? 'flex-row-reverse' : ''
                        }`}>
                          <div className={`p-2 rounded-full ${
                            mensaje.tipo === 'usuario' 
                              ? 'bg-blue-100' 
                              : 'bg-green-100'
                          }`}>
                            {mensaje.tipo === 'usuario' ? (
                              <User className="h-4 w-4 text-blue-600" />
                            ) : (
                              <Bot className="h-4 w-4 text-green-600" />
                            )}
                          </div>
                          
                          <div className={`p-3 rounded-lg ${
                            mensaje.tipo === 'usuario'
                              ? 'bg-blue-500 text-white'
                              : 'bg-gray-100 text-gray-800'
                          }`}>
                            <div className="prose prose-sm max-w-none">
                              {mensaje.contenido.split('\n').map((line, index) => (
                                <div key={index} className="mb-1">
                                  {line.startsWith('**') && line.endsWith('**') ? (
                                    <strong>{line.replace(/\*\*/g, '')}</strong>
                                  ) : (
                                    <span>{line}</span>
                                  )}
                                </div>
                              ))}
                            </div>
                            <p className="text-xs mt-2 opacity-70">
                              {new Date(mensaje.timestamp).toLocaleTimeString()}
                            </p>
                          </div>
                        </div>
                      </div>
                    ))}
                    
                    {cargandoRespuesta && (
                      <div className="flex justify-start">
                        <div className="flex items-center gap-3">
                          <div className="p-2 rounded-full bg-green-100">
                            <Bot className="h-4 w-4 text-green-600" />
                          </div>
                          <div className="bg-gray-100 p-3 rounded-lg">
                            <div className="flex items-center gap-2">
                              <Loader2 className="h-4 w-4 animate-spin" />
                              <span className="text-sm">IA analizando tu consulta...</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Input de mensaje */}
                  <div className="p-4 border-t">
                    {/* Botones de acceso r√°pido */}
                    <div className="flex gap-2 mb-3">
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={iniciarWizard}
                        className="bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100"
                      >
                        <ClipboardList className="h-4 w-4 mr-2" />
                        Empezar Configuraci√≥n
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => setMensajeActual('¬øC√≥mo puedo mejorar la producci√≥n de mis cultivos?')}
                        className="text-xs"
                      >
                        üí° Mejorar producci√≥n
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => setMensajeActual('¬øQu√© hacer contra las plagas en mis cultivos?')}
                        className="text-xs"
                      >
                        üêõ Control de plagas
                      </Button>
                    </div>

                    <div className="flex gap-2">
                      <Input
                        placeholder="Escribe tu consulta o haz click en 'Empezar Configuraci√≥n' para un plan personalizado..."
                        value={mensajeActual}
                        onChange={(e) => setMensajeActual(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && enviarMensaje()}
                        disabled={cargandoRespuesta}
                      />
                      <Button 
                        onClick={enviarMensaje}
                        disabled={!mensajeActual.trim() || cargandoRespuesta}
                      >
                        <Send className="h-4 w-4" />
                      </Button>
                    </div>
                    
                    {!perfilCompleto && (
                      <p className="text-xs text-muted-foreground mt-2">
                        üí° Completa tu perfil para obtener recomendaciones m√°s precisas
                      </p>
                    )}
                  </div>
                </>
              ) : (
                <div className="flex-1 flex items-center justify-center">
                  <div className="text-center">
                    <MessageSquare className="h-16 w-16 mx-auto text-muted-foreground mb-4" />
                    <h3 className="text-lg font-semibold mb-2">Selecciona una conversaci√≥n</h3>
                    <p className="text-muted-foreground">
                      O crea una nueva para comenzar a chatear con la IA
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
        </TabsContent>
        
        {/* Tab: Planes de Acci√≥n */}
        <TabsContent value="planes" className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold">Planes de Acci√≥n</h2>
              <p className="text-muted-foreground">
                Gestiona tus planes personalizados generados por IA
              </p>
            </div>
            <Button onClick={() => setMostrarFormularioPlan(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Nuevo Plan
            </Button>
          </div>

          {planes.length === 0 ? (
            <Card className="p-12 text-center">
              <ClipboardList className="h-16 w-16 mx-auto text-muted-foreground mb-4" />
              <h3 className="text-lg font-semibold mb-2">No tienes planes de acci√≥n</h3>
              <p className="text-muted-foreground mb-4">
                Crea planes personalizados o genera uno desde una conversaci√≥n con la IA
              </p>
              <Button onClick={() => setActiveTab('chat')}>
                <MessageSquare className="h-4 w-4 mr-2" />
                Ir al Chat IA
                </Button>
            </Card>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {planes.map((plan) => (
                <Card key={plan.id} className="cursor-pointer hover:shadow-lg transition-shadow">
              <CardHeader>
                    <div className="flex items-start justify-between">
                      <div>
                        <CardTitle className="text-lg">{plan.titulo}</CardTitle>
                        <CardDescription>{plan.descripcion}</CardDescription>
                      </div>
                      <Badge className={
                        plan.estado === 'completado' ? 'bg-green-100 text-green-800' :
                        plan.estado === 'en_progreso' ? 'bg-blue-100 text-blue-800' :
                        plan.estado === 'pausado' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-gray-100 text-gray-800'
                      }>
                        {plan.estado.replace('_', ' ')}
                      </Badge>
                    </div>
              </CardHeader>
                  
                  <CardContent className="space-y-4">
                    <div>
                      <div className="flex items-center justify-between text-sm mb-2">
                        <span>Progreso</span>
                        <span>{Math.round(plan.progreso)}%</span>
                      </div>
                      <Progress value={plan.progreso} />
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex items-center justify-between text-sm">
                        <span>Tareas:</span>
                        <span>{plan.tareas.filter(t => t.completada).length}/{plan.tareas.length}</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span>Presupuesto:</span>
                        <span>{plan.presupuesto} Bs</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span>Fecha l√≠mite:</span>
                        <span>{new Date(plan.fechaFin).toLocaleDateString()}</span>
                      </div>
                    </div>
                    
                    <div className="space-y-1">
                      {plan.tareas.slice(0, 3).map((tarea) => (
                        <div key={tarea.id} className="flex items-center gap-2 text-sm">
                          <Checkbox 
                            checked={tarea.completada}
                            onCheckedChange={() => completarTarea(plan.id, tarea.id)}
                          />
                          <span className={tarea.completada ? 'line-through text-muted-foreground' : ''}>
                            {tarea.titulo}
                          </span>
                        </div>
                      ))}
                      {plan.tareas.length > 3 && (
                        <p className="text-xs text-muted-foreground">
                          +{plan.tareas.length - 3} tareas m√°s
                        </p>
                      )}
                    </div>
              </CardContent>
                  
                  <CardFooter className="flex gap-2">
                    <Button variant="outline" size="sm" className="flex-1">
                      <Eye className="h-4 w-4 mr-2" />
                      Ver Detalles
                    </Button>
                    <Button variant="outline" size="sm">
                      <Edit className="h-4 w-4" />
                </Button>
              </CardFooter>
            </Card>
              ))}
            </div>
          )}
        </TabsContent>

        {/* Tab: Mis Cultivos */}
        <TabsContent value="cultivos" className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold">Mis Cultivos</h2>
              <p className="text-muted-foreground">
                Gestiona informaci√≥n detallada de tus cultivos actuales
              </p>
            </div>
            <Button onClick={() => setMostrarFormularioCultivo(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Agregar Cultivo
            </Button>
          </div>

          {perfil.cultivos.length === 0 ? (
            <Card className="p-12 text-center">
              <Sprout className="h-16 w-16 mx-auto text-muted-foreground mb-4" />
              <h3 className="text-lg font-semibold mb-2">No tienes cultivos registrados</h3>
              <p className="text-muted-foreground mb-4">
                Agrega informaci√≥n sobre tus cultivos para obtener recomendaciones personalizadas
              </p>
              <Button onClick={() => setMostrarFormularioCultivo(true)}>
                <Plus className="h-4 w-4 mr-2" />
                Agregar Primer Cultivo
              </Button>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {perfil.cultivos.map((cultivo) => (
                <Card key={cultivo.id}>
              <CardHeader>
                    <div className="flex items-start justify-between">
                      <div>
                        <CardTitle className="text-lg">{cultivo.nombre}</CardTitle>
                        <CardDescription>{cultivo.variedad}</CardDescription>
                      </div>
                      <Badge className={
                        cultivo.prioridad === 'alta' ? 'bg-red-100 text-red-800' :
                        cultivo.prioridad === 'media' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-green-100 text-green-800'
                      }>
                        {cultivo.prioridad}
                      </Badge>
                    </div>
              </CardHeader>
                  
                  <CardContent className="space-y-3">
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <span className="text-muted-foreground">Hect√°reas:</span>
                        <p className="font-medium">{cultivo.hectareas} ha</p>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Etapa:</span>
                        <p className="font-medium">{cultivo.etapaActual}</p>
                      </div>
                    </div>
                    
                    <div>
                      <span className="text-muted-foreground text-sm">Fecha de siembra:</span>
                      <p className="font-medium">{new Date(cultivo.fechaSiembra).toLocaleDateString()}</p>
                    </div>
                    
                    {cultivo.riesgos.length > 0 && (
                      <div>
                        <span className="text-muted-foreground text-sm">Riesgos identificados:</span>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {cultivo.riesgos.map((riesgo, index) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {riesgo}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    )}
              </CardContent>
                  
                  <CardFooter className="flex gap-2">
                    <Button variant="outline" size="sm" className="flex-1">
                      <Eye className="h-4 w-4 mr-2" />
                      Ver Detalles
                    </Button>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => setCultivoEditando(cultivo.id)}
                    >
                      <Edit className="h-4 w-4" />
                </Button>
              </CardFooter>
            </Card>
              ))}
          </div>
          )}

          {/* Formulario de cultivo */}
          {mostrarFormularioCultivo && (
            <Card className="border-2 border-green-200">
              <CardHeader>
                <CardTitle>Agregar Nuevo Cultivo</CardTitle>
                <CardDescription>
                  Proporciona informaci√≥n detallada para obtener recomendaciones precisas
                </CardDescription>
              </CardHeader>
              
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>Tipo de Cultivo</Label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Selecciona el cultivo" />
                      </SelectTrigger>
                      <SelectContent>
                        {cultivosDisponibles.map((cultivo) => (
                          <SelectItem key={cultivo} value={cultivo.toLowerCase()}>
                            {cultivo}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label>Variedad</Label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Selecciona la variedad" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="general">Variedad general</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label>Hect√°reas</Label>
                    <Input type="number" placeholder="0.0" step="0.1" />
                  </div>
                  
                  <div className="space-y-2">
                    <Label>Fecha de Siembra</Label>
                    <Input type="date" />
                </div>
                  
                  <div className="space-y-2">
                    <Label>Etapa Actual</Label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Selecciona la etapa" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="preparacion">Preparaci√≥n del suelo</SelectItem>
                        <SelectItem value="siembra">Siembra</SelectItem>
                        <SelectItem value="germinacion">Germinaci√≥n</SelectItem>
                        <SelectItem value="crecimiento">Crecimiento vegetativo</SelectItem>
                        <SelectItem value="floracion">Floraci√≥n</SelectItem>
                        <SelectItem value="fructificacion">Fructificaci√≥n</SelectItem>
                        <SelectItem value="maduracion">Maduraci√≥n</SelectItem>
                        <SelectItem value="cosecha">Cosecha</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label>Prioridad</Label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Nivel de prioridad" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="alta">Alta</SelectItem>
                        <SelectItem value="media">Media</SelectItem>
                        <SelectItem value="baja">Baja</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label>Riesgos Identificados (opcional)</Label>
                  <Textarea 
                    placeholder="Describe cualquier riesgo o problema que hayas observado..."
                    rows={3}
                  />
                </div>
              </CardContent>
              
              <CardFooter className="flex gap-2">
                <Button 
                  variant="outline" 
                  onClick={() => setMostrarFormularioCultivo(false)}
                >
                  Cancelar
                </Button>
                <Button>
                  <Save className="h-4 w-4 mr-2" />
                  Guardar Cultivo
                </Button>
              </CardFooter>
            </Card>
          )}
        </TabsContent>
        
        {/* Tab: Mi Perfil */}
        <TabsContent value="perfil" className="space-y-4">
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-6">
              <h2 className="text-2xl font-bold">Mi Perfil Agr√≠cola</h2>
              <p className="text-muted-foreground">
                Informaci√≥n completa para recomendaciones personalizadas de IA
              </p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Informaci√≥n b√°sica */}
              <Card className="lg:col-span-2">
              <CardHeader>
                  <CardTitle>Informaci√≥n B√°sica</CardTitle>
              </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label>Nombre Completo</Label>
                      <Input 
                        value={perfil.nombre}
                        onChange={(e) => setPerfil(prev => ({ ...prev, nombre: e.target.value }))}
                        placeholder="Tu nombre completo"
                      />
                  </div>
                  
                    <div className="space-y-2">
                      <Label>Ubicaci√≥n</Label>
                      <Input 
                        value={perfil.ubicacion}
                        onChange={(e) => setPerfil(prev => ({ ...prev, ubicacion: e.target.value }))}
                        placeholder="Ciudad, departamento"
                      />
                  </div>
                    
                    <div className="space-y-2">
                      <Label>Tipo de Finca</Label>
                      <Select 
                        value={perfil.tipoFinca}
                        onValueChange={(value: any) => setPerfil(prev => ({ ...prev, tipoFinca: value }))}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="familiar">Familiar</SelectItem>
                          <SelectItem value="comercial">Comercial</SelectItem>
                          <SelectItem value="cooperativa">Cooperativa</SelectItem>
                          <SelectItem value="empresa">Empresa</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div className="space-y-2">
                      <Label>Hect√°reas Totales</Label>
                      <Input 
                        type="number"
                        value={perfil.hectareasTotales}
                        onChange={(e) => setPerfil(prev => ({ ...prev, hectareasTotales: Number(e.target.value) }))}
                        placeholder="0.0"
                        step="0.1"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label>A√±os de Experiencia</Label>
                      <Input 
                        type="number"
                        value={perfil.experiencia}
                        onChange={(e) => setPerfil(prev => ({ ...prev, experiencia: Number(e.target.value) }))}
                        placeholder="0"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label>Presupuesto Anual (Bs)</Label>
                      <Input 
                        type="number"
                        value={perfil.presupuestoAnual}
                        onChange={(e) => setPerfil(prev => ({ ...prev, presupuestoAnual: Number(e.target.value) }))}
                        placeholder="0"
                      />
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label>Contacto de Emergencia</Label>
                    <Input 
                      value={perfil.contactoEmergencia}
                      onChange={(e) => setPerfil(prev => ({ ...prev, contactoEmergencia: e.target.value }))}
                      placeholder="Tel√©fono o contacto de emergencia"
                    />
                </div>
              </CardContent>
            </Card>
            
              {/* Estad√≠sticas */}
            <Card>
              <CardHeader>
                  <CardTitle>Estad√≠sticas</CardTitle>
              </CardHeader>
                <CardContent className="space-y-4">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-600">
                      {perfil.cultivos.length}
                  </div>
                    <p className="text-sm text-muted-foreground">Cultivos Registrados</p>
                  </div>
                  
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-600">
                      {conversaciones.length}
                  </div>
                    <p className="text-sm text-muted-foreground">Conversaciones IA</p>
                  </div>
                  
                  <div className="text-center">
                    <div className="text-2xl font-bold text-purple-600">
                      {planes.length}
                    </div>
                    <p className="text-sm text-muted-foreground">Planes de Acci√≥n</p>
                  </div>
                  
                  <div className="text-center">
                    <div className="text-2xl font-bold text-orange-600">
                      {Math.round(planes.reduce((acc, plan) => acc + plan.progreso, 0) / (planes.length || 1))}%
                    </div>
                    <p className="text-sm text-muted-foreground">Progreso Promedio</p>
                </div>
              </CardContent>
            </Card>
            </div>
            
            {/* Preferencias de IA */}
            <Card className="mt-6">
              <CardHeader>
                <CardTitle>Preferencias de IA</CardTitle>
                <CardDescription>
                  Personaliza c√≥mo la IA interact√∫a contigo
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label>Nivel de Detalle</Label>
                    <Select 
                      value={perfil.preferenciasIA.nivelDetalle}
                      onValueChange={(value: any) => setPerfil(prev => ({
                        ...prev,
                        preferenciasIA: { ...prev.preferenciasIA, nivelDetalle: value }
                      }))}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="basico">B√°sico</SelectItem>
                        <SelectItem value="intermedio">Intermedio</SelectItem>
                        <SelectItem value="avanzado">Avanzado</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label>Frecuencia de Notificaciones</Label>
                    <Select 
                      value={perfil.preferenciasIA.frecuenciaNotificaciones}
                      onValueChange={(value: any) => setPerfil(prev => ({
                        ...prev,
                        preferenciasIA: { ...prev.preferenciasIA, frecuenciaNotificaciones: value }
                      }))}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="alta">Alta</SelectItem>
                        <SelectItem value="media">Media</SelectItem>
                        <SelectItem value="baja">Baja</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label>Idioma Preferido</Label>
                    <Select 
                      value={perfil.preferenciasIA.idiomaPreferido}
                      onValueChange={(value: any) => setPerfil(prev => ({
                        ...prev,
                        preferenciasIA: { ...prev.preferenciasIA, idiomaPreferido: value }
                      }))}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="es">Espa√±ol</SelectItem>
                        <SelectItem value="qu">Quechua</SelectItem>
                        <SelectItem value="ay">Aymara</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
              
              <CardFooter>
                <Button className="w-full">
                  <Save className="h-4 w-4 mr-2" />
                  Guardar Perfil
                </Button>
              </CardFooter>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ConsejosPage;
